/**
 * @fileoverview
 * @enhanceable
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

// var google_api_annotations_pb = require('./google/api/annotations_pb.js');

goog.exportSymbol('proto.rpc.Asset', null, global);
goog.exportSymbol('proto.rpc.Balance', null, global);
goog.exportSymbol('proto.rpc.BalanceHistoryRequest', null, global);
goog.exportSymbol('proto.rpc.BalanceHistoryResponse', null, global);
goog.exportSymbol('proto.rpc.BalanceHistoryResponse.Record', null, global);
goog.exportSymbol('proto.rpc.BalanceQueryRequest', null, global);
goog.exportSymbol('proto.rpc.BalanceQueryResponse', null, global);
goog.exportSymbol('proto.rpc.BalanceWithdrawalRequest', null, global);
goog.exportSymbol('proto.rpc.BalanceWithdrawalResponse', null, global);
goog.exportSymbol('proto.rpc.Command', null, global);
goog.exportSymbol('proto.rpc.DealDetail', null, global);
goog.exportSymbol('proto.rpc.DealType', null, global);
goog.exportSymbol('proto.rpc.KLine', null, global);
goog.exportSymbol('proto.rpc.Limit', null, global);
goog.exportSymbol('proto.rpc.Market', null, global);
goog.exportSymbol('proto.rpc.MarketDealsRequest', null, global);
goog.exportSymbol('proto.rpc.MarketDealsResponse', null, global);
goog.exportSymbol('proto.rpc.MarketDealsResponse.Deal', null, global);
goog.exportSymbol('proto.rpc.MarketKLineRequest', null, global);
goog.exportSymbol('proto.rpc.MarketKLineResponse', null, global);
goog.exportSymbol('proto.rpc.MarketLastRequest', null, global);
goog.exportSymbol('proto.rpc.MarketLastResponse', null, global);
goog.exportSymbol('proto.rpc.MarketSide', null, global);
goog.exportSymbol('proto.rpc.MarketStatusRequest', null, global);
goog.exportSymbol('proto.rpc.MarketStatusResponse', null, global);
goog.exportSymbol('proto.rpc.MarketStatusTodayRequest', null, global);
goog.exportSymbol('proto.rpc.MarketStatusTodayResponse', null, global);
goog.exportSymbol('proto.rpc.MarketUserDealsRequest', null, global);
goog.exportSymbol('proto.rpc.MarketUserDealsResponse', null, global);
goog.exportSymbol('proto.rpc.OrderBookRequest', null, global);
goog.exportSymbol('proto.rpc.OrderBookResponse', null, global);
goog.exportSymbol('proto.rpc.OrderCancelRequest', null, global);
goog.exportSymbol('proto.rpc.OrderDealsRequest', null, global);
goog.exportSymbol('proto.rpc.OrderDealsResponse', null, global);
goog.exportSymbol('proto.rpc.OrderDepthRequest', null, global);
goog.exportSymbol('proto.rpc.OrderDepthResponse', null, global);
goog.exportSymbol('proto.rpc.OrderDepthResponse.Depth', null, global);
goog.exportSymbol('proto.rpc.OrderDetailedInfo', null, global);
goog.exportSymbol('proto.rpc.OrderEvent', null, global);
goog.exportSymbol('proto.rpc.OrderFinishedDetailRequest', null, global);
goog.exportSymbol('proto.rpc.OrderFinishedRequest', null, global);
goog.exportSymbol('proto.rpc.OrderFinishedResponse', null, global);
goog.exportSymbol('proto.rpc.OrderPendingDetailRequest', null, global);
goog.exportSymbol('proto.rpc.OrderPendingRequest', null, global);
goog.exportSymbol('proto.rpc.OrderPendingResponse', null, global);
goog.exportSymbol('proto.rpc.OrderPutLimitRequest', null, global);
goog.exportSymbol('proto.rpc.OrderPutMarketRequest', null, global);
goog.exportSymbol('proto.rpc.SubscribeBalance', null, global);
goog.exportSymbol('proto.rpc.SubscribeDeals', null, global);
goog.exportSymbol('proto.rpc.SubscribeDepth', null, global);
goog.exportSymbol('proto.rpc.SubscribeKline', null, global);
goog.exportSymbol('proto.rpc.SubscribeOrders', null, global);
goog.exportSymbol('proto.rpc.SubscribePrice', null, global);
goog.exportSymbol('proto.rpc.SubscribeTodayStatus', null, global);
goog.exportSymbol('proto.rpc.UnsubscribeBalance', null, global);
goog.exportSymbol('proto.rpc.UnsubscribeDeals', null, global);
goog.exportSymbol('proto.rpc.UnsubscribeDepth', null, global);
goog.exportSymbol('proto.rpc.UnsubscribeKline', null, global);
goog.exportSymbol('proto.rpc.UnsubscribeOrders', null, global);
goog.exportSymbol('proto.rpc.UnsubscribePrice', null, global);
goog.exportSymbol('proto.rpc.Update', null, global);
goog.exportSymbol('proto.rpc.UpdateDeals', null, global);
goog.exportSymbol('proto.rpc.UpdateOrder', null, global);
goog.exportSymbol('proto.rpc.UpdatePrice', null, global);

/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.rpc.Update = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.rpc.Update.oneofGroups_);
};
goog.inherits(proto.rpc.Update, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.rpc.Update.displayName = 'proto.rpc.Update';
}
/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.rpc.Update.oneofGroups_ = [[1,2,3,4,5,6]];

/**
 * @enum {number}
 */
proto.rpc.Update.DataCase = {
  DATA_NOT_SET: 0,
  UPDATE_PRICE: 1,
  UPDATE_DEALS: 2,
  UPDATE_BALANCE: 3,
  UPDATE_KLINE: 4,
  UPDATE_DEPTH: 5,
  UPDATE_ORDER: 6
};

/**
 * @return {proto.rpc.Update.DataCase}
 */
proto.rpc.Update.prototype.getDataCase = function() {
  return /** @type {proto.rpc.Update.DataCase} */(jspb.Message.computeOneofCase(this, proto.rpc.Update.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.rpc.Update.prototype.toObject = function(opt_includeInstance) {
  return proto.rpc.Update.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.rpc.Update} msg The msg instance to transform.
 * @return {!Object}
 */
proto.rpc.Update.toObject = function(includeInstance, msg) {
  var f, obj = {
    updatePrice: (f = msg.getUpdatePrice()) && proto.rpc.UpdatePrice.toObject(includeInstance, f),
    updateDeals: (f = msg.getUpdateDeals()) && proto.rpc.UpdateDeals.toObject(includeInstance, f),
    updateBalance: (f = msg.getUpdateBalance()) && proto.rpc.BalanceQueryResponse.toObject(includeInstance, f),
    updateKline: (f = msg.getUpdateKline()) && proto.rpc.KLine.toObject(includeInstance, f),
    updateDepth: (f = msg.getUpdateDepth()) && proto.rpc.OrderDepthResponse.toObject(includeInstance, f),
    updateOrder: (f = msg.getUpdateOrder()) && proto.rpc.UpdateOrder.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.rpc.Update}
 */
proto.rpc.Update.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.rpc.Update;
  return proto.rpc.Update.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.rpc.Update} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.rpc.Update}
 */
proto.rpc.Update.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.rpc.UpdatePrice;
      reader.readMessage(value,proto.rpc.UpdatePrice.deserializeBinaryFromReader);
      msg.setUpdatePrice(value);
      break;
    case 2:
      var value = new proto.rpc.UpdateDeals;
      reader.readMessage(value,proto.rpc.UpdateDeals.deserializeBinaryFromReader);
      msg.setUpdateDeals(value);
      break;
    case 3:
      var value = new proto.rpc.BalanceQueryResponse;
      reader.readMessage(value,proto.rpc.BalanceQueryResponse.deserializeBinaryFromReader);
      msg.setUpdateBalance(value);
      break;
    case 4:
      var value = new proto.rpc.KLine;
      reader.readMessage(value,proto.rpc.KLine.deserializeBinaryFromReader);
      msg.setUpdateKline(value);
      break;
    case 5:
      var value = new proto.rpc.OrderDepthResponse;
      reader.readMessage(value,proto.rpc.OrderDepthResponse.deserializeBinaryFromReader);
      msg.setUpdateDepth(value);
      break;
    case 6:
      var value = new proto.rpc.UpdateOrder;
      reader.readMessage(value,proto.rpc.UpdateOrder.deserializeBinaryFromReader);
      msg.setUpdateOrder(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.rpc.Update} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.rpc.Update.serializeBinaryToWriter = function(message, writer) {
  message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.rpc.Update.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.rpc.Update.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
  f = this.getUpdatePrice();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.rpc.UpdatePrice.serializeBinaryToWriter
    );
  }
  f = this.getUpdateDeals();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.rpc.UpdateDeals.serializeBinaryToWriter
    );
  }
  f = this.getUpdateBalance();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.rpc.BalanceQueryResponse.serializeBinaryToWriter
    );
  }
  f = this.getUpdateKline();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      proto.rpc.KLine.serializeBinaryToWriter
    );
  }
  f = this.getUpdateDepth();
  if (f != null) {
    writer.writeMessage(
      5,
      f,
      proto.rpc.OrderDepthResponse.serializeBinaryToWriter
    );
  }
  f = this.getUpdateOrder();
  if (f != null) {
    writer.writeMessage(
      6,
      f,
      proto.rpc.UpdateOrder.serializeBinaryToWriter
    );
  }
};


/**
 * Creates a deep clone of this proto. No data is shared with the original.
 * @return {!proto.rpc.Update} The clone.
 */
proto.rpc.Update.prototype.cloneMessage = function() {
  return /** @type {!proto.rpc.Update} */ (jspb.Message.cloneMessage(this));
};


/**
 * optional UpdatePrice update_price = 1;
 * @return {proto.rpc.UpdatePrice}
 */
proto.rpc.Update.prototype.getUpdatePrice = function() {
  return /** @type{proto.rpc.UpdatePrice} */ (
    jspb.Message.getWrapperField(this, proto.rpc.UpdatePrice, 1));
};


/** @param {proto.rpc.UpdatePrice|undefined} value  */
proto.rpc.Update.prototype.setUpdatePrice = function(value) {
  jspb.Message.setOneofWrapperField(this, 1, proto.rpc.Update.oneofGroups_[0], value);
};


proto.rpc.Update.prototype.clearUpdatePrice = function() {
  this.setUpdatePrice(undefined);
};


/**
 * Returns whether this field is set.
 * @return{!boolean}
 */
proto.rpc.Update.prototype.hasUpdatePrice = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional UpdateDeals update_deals = 2;
 * @return {proto.rpc.UpdateDeals}
 */
proto.rpc.Update.prototype.getUpdateDeals = function() {
  return /** @type{proto.rpc.UpdateDeals} */ (
    jspb.Message.getWrapperField(this, proto.rpc.UpdateDeals, 2));
};


/** @param {proto.rpc.UpdateDeals|undefined} value  */
proto.rpc.Update.prototype.setUpdateDeals = function(value) {
  jspb.Message.setOneofWrapperField(this, 2, proto.rpc.Update.oneofGroups_[0], value);
};


proto.rpc.Update.prototype.clearUpdateDeals = function() {
  this.setUpdateDeals(undefined);
};


/**
 * Returns whether this field is set.
 * @return{!boolean}
 */
proto.rpc.Update.prototype.hasUpdateDeals = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional BalanceQueryResponse update_balance = 3;
 * @return {proto.rpc.BalanceQueryResponse}
 */
proto.rpc.Update.prototype.getUpdateBalance = function() {
  return /** @type{proto.rpc.BalanceQueryResponse} */ (
    jspb.Message.getWrapperField(this, proto.rpc.BalanceQueryResponse, 3));
};


/** @param {proto.rpc.BalanceQueryResponse|undefined} value  */
proto.rpc.Update.prototype.setUpdateBalance = function(value) {
  jspb.Message.setOneofWrapperField(this, 3, proto.rpc.Update.oneofGroups_[0], value);
};


proto.rpc.Update.prototype.clearUpdateBalance = function() {
  this.setUpdateBalance(undefined);
};


/**
 * Returns whether this field is set.
 * @return{!boolean}
 */
proto.rpc.Update.prototype.hasUpdateBalance = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional KLine update_kline = 4;
 * @return {proto.rpc.KLine}
 */
proto.rpc.Update.prototype.getUpdateKline = function() {
  return /** @type{proto.rpc.KLine} */ (
    jspb.Message.getWrapperField(this, proto.rpc.KLine, 4));
};


/** @param {proto.rpc.KLine|undefined} value  */
proto.rpc.Update.prototype.setUpdateKline = function(value) {
  jspb.Message.setOneofWrapperField(this, 4, proto.rpc.Update.oneofGroups_[0], value);
};


proto.rpc.Update.prototype.clearUpdateKline = function() {
  this.setUpdateKline(undefined);
};


/**
 * Returns whether this field is set.
 * @return{!boolean}
 */
proto.rpc.Update.prototype.hasUpdateKline = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional OrderDepthResponse update_depth = 5;
 * @return {proto.rpc.OrderDepthResponse}
 */
proto.rpc.Update.prototype.getUpdateDepth = function() {
  return /** @type{proto.rpc.OrderDepthResponse} */ (
    jspb.Message.getWrapperField(this, proto.rpc.OrderDepthResponse, 5));
};


/** @param {proto.rpc.OrderDepthResponse|undefined} value  */
proto.rpc.Update.prototype.setUpdateDepth = function(value) {
  jspb.Message.setOneofWrapperField(this, 5, proto.rpc.Update.oneofGroups_[0], value);
};


proto.rpc.Update.prototype.clearUpdateDepth = function() {
  this.setUpdateDepth(undefined);
};


/**
 * Returns whether this field is set.
 * @return{!boolean}
 */
proto.rpc.Update.prototype.hasUpdateDepth = function() {
  return jspb.Message.getField(this, 5) != null;
};


/**
 * optional UpdateOrder update_order = 6;
 * @return {proto.rpc.UpdateOrder}
 */
proto.rpc.Update.prototype.getUpdateOrder = function() {
  return /** @type{proto.rpc.UpdateOrder} */ (
    jspb.Message.getWrapperField(this, proto.rpc.UpdateOrder, 6));
};


/** @param {proto.rpc.UpdateOrder|undefined} value  */
proto.rpc.Update.prototype.setUpdateOrder = function(value) {
  jspb.Message.setOneofWrapperField(this, 6, proto.rpc.Update.oneofGroups_[0], value);
};


proto.rpc.Update.prototype.clearUpdateOrder = function() {
  this.setUpdateOrder(undefined);
};


/**
 * Returns whether this field is set.
 * @return{!boolean}
 */
proto.rpc.Update.prototype.hasUpdateOrder = function() {
  return jspb.Message.getField(this, 6) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.rpc.Command = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.rpc.Command.oneofGroups_);
};
goog.inherits(proto.rpc.Command, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.rpc.Command.displayName = 'proto.rpc.Command';
}
/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.rpc.Command.oneofGroups_ = [[1,2,3,4,5,6,7,8,9,10,11,12]];

/**
 * @enum {number}
 */
proto.rpc.Command.DataCase = {
  DATA_NOT_SET: 0,
  SUBSCRIBE_PRICE: 1,
  UNSUBSCRIBE_PRICE: 2,
  SUBSCIBE_DEALS: 3,
  UNSUBSCRIBE_DEALS: 4,
  SUBSCRIBE_BALANCE: 5,
  UNSUBSCRIBE_BALANCE: 6,
  SUBSCRIBE_KLINE: 7,
  UNSUBSCRIBE_KLINE: 8,
  SUBSCRIBE_DEPTH: 9,
  UNSUBSCRIBE_DEPTH: 10,
  SUBSCRIBE_ORDERS: 11,
  UNSUBSCRIBE_ORDERS: 12
};

/**
 * @return {proto.rpc.Command.DataCase}
 */
proto.rpc.Command.prototype.getDataCase = function() {
  return /** @type {proto.rpc.Command.DataCase} */(jspb.Message.computeOneofCase(this, proto.rpc.Command.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.rpc.Command.prototype.toObject = function(opt_includeInstance) {
  return proto.rpc.Command.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.rpc.Command} msg The msg instance to transform.
 * @return {!Object}
 */
proto.rpc.Command.toObject = function(includeInstance, msg) {
  var f, obj = {
    subscribePrice: (f = msg.getSubscribePrice()) && proto.rpc.SubscribePrice.toObject(includeInstance, f),
    unsubscribePrice: (f = msg.getUnsubscribePrice()) && proto.rpc.UnsubscribePrice.toObject(includeInstance, f),
    subscibeDeals: (f = msg.getSubscibeDeals()) && proto.rpc.SubscribeDeals.toObject(includeInstance, f),
    unsubscribeDeals: (f = msg.getUnsubscribeDeals()) && proto.rpc.UnsubscribeDeals.toObject(includeInstance, f),
    subscribeBalance: (f = msg.getSubscribeBalance()) && proto.rpc.SubscribeBalance.toObject(includeInstance, f),
    unsubscribeBalance: (f = msg.getUnsubscribeBalance()) && proto.rpc.UnsubscribeBalance.toObject(includeInstance, f),
    subscribeKline: (f = msg.getSubscribeKline()) && proto.rpc.SubscribeKline.toObject(includeInstance, f),
    unsubscribeKline: (f = msg.getUnsubscribeKline()) && proto.rpc.UnsubscribeKline.toObject(includeInstance, f),
    subscribeDepth: (f = msg.getSubscribeDepth()) && proto.rpc.SubscribeDepth.toObject(includeInstance, f),
    unsubscribeDepth: (f = msg.getUnsubscribeDepth()) && proto.rpc.UnsubscribeDepth.toObject(includeInstance, f),
    subscribeOrders: (f = msg.getSubscribeOrders()) && proto.rpc.SubscribeOrders.toObject(includeInstance, f),
    unsubscribeOrders: (f = msg.getUnsubscribeOrders()) && proto.rpc.UnsubscribeOrders.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.rpc.Command}
 */
proto.rpc.Command.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.rpc.Command;
  return proto.rpc.Command.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.rpc.Command} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.rpc.Command}
 */
proto.rpc.Command.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.rpc.SubscribePrice;
      reader.readMessage(value,proto.rpc.SubscribePrice.deserializeBinaryFromReader);
      msg.setSubscribePrice(value);
      break;
    case 2:
      var value = new proto.rpc.UnsubscribePrice;
      reader.readMessage(value,proto.rpc.UnsubscribePrice.deserializeBinaryFromReader);
      msg.setUnsubscribePrice(value);
      break;
    case 3:
      var value = new proto.rpc.SubscribeDeals;
      reader.readMessage(value,proto.rpc.SubscribeDeals.deserializeBinaryFromReader);
      msg.setSubscibeDeals(value);
      break;
    case 4:
      var value = new proto.rpc.UnsubscribeDeals;
      reader.readMessage(value,proto.rpc.UnsubscribeDeals.deserializeBinaryFromReader);
      msg.setUnsubscribeDeals(value);
      break;
    case 5:
      var value = new proto.rpc.SubscribeBalance;
      reader.readMessage(value,proto.rpc.SubscribeBalance.deserializeBinaryFromReader);
      msg.setSubscribeBalance(value);
      break;
    case 6:
      var value = new proto.rpc.UnsubscribeBalance;
      reader.readMessage(value,proto.rpc.UnsubscribeBalance.deserializeBinaryFromReader);
      msg.setUnsubscribeBalance(value);
      break;
    case 7:
      var value = new proto.rpc.SubscribeKline;
      reader.readMessage(value,proto.rpc.SubscribeKline.deserializeBinaryFromReader);
      msg.setSubscribeKline(value);
      break;
    case 8:
      var value = new proto.rpc.UnsubscribeKline;
      reader.readMessage(value,proto.rpc.UnsubscribeKline.deserializeBinaryFromReader);
      msg.setUnsubscribeKline(value);
      break;
    case 9:
      var value = new proto.rpc.SubscribeDepth;
      reader.readMessage(value,proto.rpc.SubscribeDepth.deserializeBinaryFromReader);
      msg.setSubscribeDepth(value);
      break;
    case 10:
      var value = new proto.rpc.UnsubscribeDepth;
      reader.readMessage(value,proto.rpc.UnsubscribeDepth.deserializeBinaryFromReader);
      msg.setUnsubscribeDepth(value);
      break;
    case 11:
      var value = new proto.rpc.SubscribeOrders;
      reader.readMessage(value,proto.rpc.SubscribeOrders.deserializeBinaryFromReader);
      msg.setSubscribeOrders(value);
      break;
    case 12:
      var value = new proto.rpc.UnsubscribeOrders;
      reader.readMessage(value,proto.rpc.UnsubscribeOrders.deserializeBinaryFromReader);
      msg.setUnsubscribeOrders(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.rpc.Command} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.rpc.Command.serializeBinaryToWriter = function(message, writer) {
  message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.rpc.Command.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.rpc.Command.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
  f = this.getSubscribePrice();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.rpc.SubscribePrice.serializeBinaryToWriter
    );
  }
  f = this.getUnsubscribePrice();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.rpc.UnsubscribePrice.serializeBinaryToWriter
    );
  }
  f = this.getSubscibeDeals();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.rpc.SubscribeDeals.serializeBinaryToWriter
    );
  }
  f = this.getUnsubscribeDeals();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      proto.rpc.UnsubscribeDeals.serializeBinaryToWriter
    );
  }
  f = this.getSubscribeBalance();
  if (f != null) {
    writer.writeMessage(
      5,
      f,
      proto.rpc.SubscribeBalance.serializeBinaryToWriter
    );
  }
  f = this.getUnsubscribeBalance();
  if (f != null) {
    writer.writeMessage(
      6,
      f,
      proto.rpc.UnsubscribeBalance.serializeBinaryToWriter
    );
  }
  f = this.getSubscribeKline();
  if (f != null) {
    writer.writeMessage(
      7,
      f,
      proto.rpc.SubscribeKline.serializeBinaryToWriter
    );
  }
  f = this.getUnsubscribeKline();
  if (f != null) {
    writer.writeMessage(
      8,
      f,
      proto.rpc.UnsubscribeKline.serializeBinaryToWriter
    );
  }
  f = this.getSubscribeDepth();
  if (f != null) {
    writer.writeMessage(
      9,
      f,
      proto.rpc.SubscribeDepth.serializeBinaryToWriter
    );
  }
  f = this.getUnsubscribeDepth();
  if (f != null) {
    writer.writeMessage(
      10,
      f,
      proto.rpc.UnsubscribeDepth.serializeBinaryToWriter
    );
  }
  f = this.getSubscribeOrders();
  if (f != null) {
    writer.writeMessage(
      11,
      f,
      proto.rpc.SubscribeOrders.serializeBinaryToWriter
    );
  }
  f = this.getUnsubscribeOrders();
  if (f != null) {
    writer.writeMessage(
      12,
      f,
      proto.rpc.UnsubscribeOrders.serializeBinaryToWriter
    );
  }
};


/**
 * Creates a deep clone of this proto. No data is shared with the original.
 * @return {!proto.rpc.Command} The clone.
 */
proto.rpc.Command.prototype.cloneMessage = function() {
  return /** @type {!proto.rpc.Command} */ (jspb.Message.cloneMessage(this));
};


/**
 * optional SubscribePrice subscribe_price = 1;
 * @return {proto.rpc.SubscribePrice}
 */
proto.rpc.Command.prototype.getSubscribePrice = function() {
  return /** @type{proto.rpc.SubscribePrice} */ (
    jspb.Message.getWrapperField(this, proto.rpc.SubscribePrice, 1));
};


/** @param {proto.rpc.SubscribePrice|undefined} value  */
proto.rpc.Command.prototype.setSubscribePrice = function(value) {
  jspb.Message.setOneofWrapperField(this, 1, proto.rpc.Command.oneofGroups_[0], value);
};


proto.rpc.Command.prototype.clearSubscribePrice = function() {
  this.setSubscribePrice(undefined);
};


/**
 * Returns whether this field is set.
 * @return{!boolean}
 */
proto.rpc.Command.prototype.hasSubscribePrice = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional UnsubscribePrice unsubscribe_price = 2;
 * @return {proto.rpc.UnsubscribePrice}
 */
proto.rpc.Command.prototype.getUnsubscribePrice = function() {
  return /** @type{proto.rpc.UnsubscribePrice} */ (
    jspb.Message.getWrapperField(this, proto.rpc.UnsubscribePrice, 2));
};


/** @param {proto.rpc.UnsubscribePrice|undefined} value  */
proto.rpc.Command.prototype.setUnsubscribePrice = function(value) {
  jspb.Message.setOneofWrapperField(this, 2, proto.rpc.Command.oneofGroups_[0], value);
};


proto.rpc.Command.prototype.clearUnsubscribePrice = function() {
  this.setUnsubscribePrice(undefined);
};


/**
 * Returns whether this field is set.
 * @return{!boolean}
 */
proto.rpc.Command.prototype.hasUnsubscribePrice = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional SubscribeDeals subscibe_deals = 3;
 * @return {proto.rpc.SubscribeDeals}
 */
proto.rpc.Command.prototype.getSubscibeDeals = function() {
  return /** @type{proto.rpc.SubscribeDeals} */ (
    jspb.Message.getWrapperField(this, proto.rpc.SubscribeDeals, 3));
};


/** @param {proto.rpc.SubscribeDeals|undefined} value  */
proto.rpc.Command.prototype.setSubscibeDeals = function(value) {
  jspb.Message.setOneofWrapperField(this, 3, proto.rpc.Command.oneofGroups_[0], value);
};


proto.rpc.Command.prototype.clearSubscibeDeals = function() {
  this.setSubscibeDeals(undefined);
};


/**
 * Returns whether this field is set.
 * @return{!boolean}
 */
proto.rpc.Command.prototype.hasSubscibeDeals = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional UnsubscribeDeals unsubscribe_deals = 4;
 * @return {proto.rpc.UnsubscribeDeals}
 */
proto.rpc.Command.prototype.getUnsubscribeDeals = function() {
  return /** @type{proto.rpc.UnsubscribeDeals} */ (
    jspb.Message.getWrapperField(this, proto.rpc.UnsubscribeDeals, 4));
};


/** @param {proto.rpc.UnsubscribeDeals|undefined} value  */
proto.rpc.Command.prototype.setUnsubscribeDeals = function(value) {
  jspb.Message.setOneofWrapperField(this, 4, proto.rpc.Command.oneofGroups_[0], value);
};


proto.rpc.Command.prototype.clearUnsubscribeDeals = function() {
  this.setUnsubscribeDeals(undefined);
};


/**
 * Returns whether this field is set.
 * @return{!boolean}
 */
proto.rpc.Command.prototype.hasUnsubscribeDeals = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional SubscribeBalance subscribe_balance = 5;
 * @return {proto.rpc.SubscribeBalance}
 */
proto.rpc.Command.prototype.getSubscribeBalance = function() {
  return /** @type{proto.rpc.SubscribeBalance} */ (
    jspb.Message.getWrapperField(this, proto.rpc.SubscribeBalance, 5));
};


/** @param {proto.rpc.SubscribeBalance|undefined} value  */
proto.rpc.Command.prototype.setSubscribeBalance = function(value) {
  jspb.Message.setOneofWrapperField(this, 5, proto.rpc.Command.oneofGroups_[0], value);
};


proto.rpc.Command.prototype.clearSubscribeBalance = function() {
  this.setSubscribeBalance(undefined);
};


/**
 * Returns whether this field is set.
 * @return{!boolean}
 */
proto.rpc.Command.prototype.hasSubscribeBalance = function() {
  return jspb.Message.getField(this, 5) != null;
};


/**
 * optional UnsubscribeBalance unsubscribe_balance = 6;
 * @return {proto.rpc.UnsubscribeBalance}
 */
proto.rpc.Command.prototype.getUnsubscribeBalance = function() {
  return /** @type{proto.rpc.UnsubscribeBalance} */ (
    jspb.Message.getWrapperField(this, proto.rpc.UnsubscribeBalance, 6));
};


/** @param {proto.rpc.UnsubscribeBalance|undefined} value  */
proto.rpc.Command.prototype.setUnsubscribeBalance = function(value) {
  jspb.Message.setOneofWrapperField(this, 6, proto.rpc.Command.oneofGroups_[0], value);
};


proto.rpc.Command.prototype.clearUnsubscribeBalance = function() {
  this.setUnsubscribeBalance(undefined);
};


/**
 * Returns whether this field is set.
 * @return{!boolean}
 */
proto.rpc.Command.prototype.hasUnsubscribeBalance = function() {
  return jspb.Message.getField(this, 6) != null;
};


/**
 * optional SubscribeKline subscribe_kline = 7;
 * @return {proto.rpc.SubscribeKline}
 */
proto.rpc.Command.prototype.getSubscribeKline = function() {
  return /** @type{proto.rpc.SubscribeKline} */ (
    jspb.Message.getWrapperField(this, proto.rpc.SubscribeKline, 7));
};


/** @param {proto.rpc.SubscribeKline|undefined} value  */
proto.rpc.Command.prototype.setSubscribeKline = function(value) {
  jspb.Message.setOneofWrapperField(this, 7, proto.rpc.Command.oneofGroups_[0], value);
};


proto.rpc.Command.prototype.clearSubscribeKline = function() {
  this.setSubscribeKline(undefined);
};


/**
 * Returns whether this field is set.
 * @return{!boolean}
 */
proto.rpc.Command.prototype.hasSubscribeKline = function() {
  return jspb.Message.getField(this, 7) != null;
};


/**
 * optional UnsubscribeKline unsubscribe_kline = 8;
 * @return {proto.rpc.UnsubscribeKline}
 */
proto.rpc.Command.prototype.getUnsubscribeKline = function() {
  return /** @type{proto.rpc.UnsubscribeKline} */ (
    jspb.Message.getWrapperField(this, proto.rpc.UnsubscribeKline, 8));
};


/** @param {proto.rpc.UnsubscribeKline|undefined} value  */
proto.rpc.Command.prototype.setUnsubscribeKline = function(value) {
  jspb.Message.setOneofWrapperField(this, 8, proto.rpc.Command.oneofGroups_[0], value);
};


proto.rpc.Command.prototype.clearUnsubscribeKline = function() {
  this.setUnsubscribeKline(undefined);
};


/**
 * Returns whether this field is set.
 * @return{!boolean}
 */
proto.rpc.Command.prototype.hasUnsubscribeKline = function() {
  return jspb.Message.getField(this, 8) != null;
};


/**
 * optional SubscribeDepth subscribe_depth = 9;
 * @return {proto.rpc.SubscribeDepth}
 */
proto.rpc.Command.prototype.getSubscribeDepth = function() {
  return /** @type{proto.rpc.SubscribeDepth} */ (
    jspb.Message.getWrapperField(this, proto.rpc.SubscribeDepth, 9));
};


/** @param {proto.rpc.SubscribeDepth|undefined} value  */
proto.rpc.Command.prototype.setSubscribeDepth = function(value) {
  jspb.Message.setOneofWrapperField(this, 9, proto.rpc.Command.oneofGroups_[0], value);
};


proto.rpc.Command.prototype.clearSubscribeDepth = function() {
  this.setSubscribeDepth(undefined);
};


/**
 * Returns whether this field is set.
 * @return{!boolean}
 */
proto.rpc.Command.prototype.hasSubscribeDepth = function() {
  return jspb.Message.getField(this, 9) != null;
};


/**
 * optional UnsubscribeDepth unsubscribe_depth = 10;
 * @return {proto.rpc.UnsubscribeDepth}
 */
proto.rpc.Command.prototype.getUnsubscribeDepth = function() {
  return /** @type{proto.rpc.UnsubscribeDepth} */ (
    jspb.Message.getWrapperField(this, proto.rpc.UnsubscribeDepth, 10));
};


/** @param {proto.rpc.UnsubscribeDepth|undefined} value  */
proto.rpc.Command.prototype.setUnsubscribeDepth = function(value) {
  jspb.Message.setOneofWrapperField(this, 10, proto.rpc.Command.oneofGroups_[0], value);
};


proto.rpc.Command.prototype.clearUnsubscribeDepth = function() {
  this.setUnsubscribeDepth(undefined);
};


/**
 * Returns whether this field is set.
 * @return{!boolean}
 */
proto.rpc.Command.prototype.hasUnsubscribeDepth = function() {
  return jspb.Message.getField(this, 10) != null;
};


/**
 * optional SubscribeOrders subscribe_orders = 11;
 * @return {proto.rpc.SubscribeOrders}
 */
proto.rpc.Command.prototype.getSubscribeOrders = function() {
  return /** @type{proto.rpc.SubscribeOrders} */ (
    jspb.Message.getWrapperField(this, proto.rpc.SubscribeOrders, 11));
};


/** @param {proto.rpc.SubscribeOrders|undefined} value  */
proto.rpc.Command.prototype.setSubscribeOrders = function(value) {
  jspb.Message.setOneofWrapperField(this, 11, proto.rpc.Command.oneofGroups_[0], value);
};


proto.rpc.Command.prototype.clearSubscribeOrders = function() {
  this.setSubscribeOrders(undefined);
};


/**
 * Returns whether this field is set.
 * @return{!boolean}
 */
proto.rpc.Command.prototype.hasSubscribeOrders = function() {
  return jspb.Message.getField(this, 11) != null;
};


/**
 * optional UnsubscribeOrders unsubscribe_orders = 12;
 * @return {proto.rpc.UnsubscribeOrders}
 */
proto.rpc.Command.prototype.getUnsubscribeOrders = function() {
  return /** @type{proto.rpc.UnsubscribeOrders} */ (
    jspb.Message.getWrapperField(this, proto.rpc.UnsubscribeOrders, 12));
};


/** @param {proto.rpc.UnsubscribeOrders|undefined} value  */
proto.rpc.Command.prototype.setUnsubscribeOrders = function(value) {
  jspb.Message.setOneofWrapperField(this, 12, proto.rpc.Command.oneofGroups_[0], value);
};


proto.rpc.Command.prototype.clearUnsubscribeOrders = function() {
  this.setUnsubscribeOrders(undefined);
};


/**
 * Returns whether this field is set.
 * @return{!boolean}
 */
proto.rpc.Command.prototype.hasUnsubscribeOrders = function() {
  return jspb.Message.getField(this, 12) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.rpc.SubscribePrice = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.rpc.SubscribePrice.repeatedFields_, null);
};
goog.inherits(proto.rpc.SubscribePrice, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.rpc.SubscribePrice.displayName = 'proto.rpc.SubscribePrice';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.rpc.SubscribePrice.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.rpc.SubscribePrice.prototype.toObject = function(opt_includeInstance) {
  return proto.rpc.SubscribePrice.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.rpc.SubscribePrice} msg The msg instance to transform.
 * @return {!Object}
 */
proto.rpc.SubscribePrice.toObject = function(includeInstance, msg) {
  var f, obj = {
    marketsList: jspb.Message.getField(msg, 1)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.rpc.SubscribePrice}
 */
proto.rpc.SubscribePrice.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.rpc.SubscribePrice;
  return proto.rpc.SubscribePrice.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.rpc.SubscribePrice} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.rpc.SubscribePrice}
 */
proto.rpc.SubscribePrice.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.getMarketsList().push(value);
      msg.setMarketsList(msg.getMarketsList());
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.rpc.SubscribePrice} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.rpc.SubscribePrice.serializeBinaryToWriter = function(message, writer) {
  message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.rpc.SubscribePrice.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.rpc.SubscribePrice.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
  f = this.getMarketsList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      1,
      f
    );
  }
};


/**
 * Creates a deep clone of this proto. No data is shared with the original.
 * @return {!proto.rpc.SubscribePrice} The clone.
 */
proto.rpc.SubscribePrice.prototype.cloneMessage = function() {
  return /** @type {!proto.rpc.SubscribePrice} */ (jspb.Message.cloneMessage(this));
};


/**
 * repeated string markets = 1;
 * If you change this array by adding, removing or replacing elements, or if you
 * replace the array itself, then you must call the setter to update it.
 * @return {!Array.<string>}
 */
proto.rpc.SubscribePrice.prototype.getMarketsList = function() {
  return /** @type {!Array.<string>} */ (jspb.Message.getField(this, 1));
};


/** @param {Array.<string>} value  */
proto.rpc.SubscribePrice.prototype.setMarketsList = function(value) {
  jspb.Message.setField(this, 1, value || []);
};


proto.rpc.SubscribePrice.prototype.clearMarketsList = function() {
  jspb.Message.setField(this, 1, []);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.rpc.UpdatePrice = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.rpc.UpdatePrice, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.rpc.UpdatePrice.displayName = 'proto.rpc.UpdatePrice';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.rpc.UpdatePrice.prototype.toObject = function(opt_includeInstance) {
  return proto.rpc.UpdatePrice.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.rpc.UpdatePrice} msg The msg instance to transform.
 * @return {!Object}
 */
proto.rpc.UpdatePrice.toObject = function(includeInstance, msg) {
  var f, obj = {
    market: msg.getMarket(),
    last: (f = msg.getLast()) && proto.rpc.MarketLastResponse.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.rpc.UpdatePrice}
 */
proto.rpc.UpdatePrice.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.rpc.UpdatePrice;
  return proto.rpc.UpdatePrice.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.rpc.UpdatePrice} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.rpc.UpdatePrice}
 */
proto.rpc.UpdatePrice.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setMarket(value);
      break;
    case 2:
      var value = new proto.rpc.MarketLastResponse;
      reader.readMessage(value,proto.rpc.MarketLastResponse.deserializeBinaryFromReader);
      msg.setLast(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.rpc.UpdatePrice} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.rpc.UpdatePrice.serializeBinaryToWriter = function(message, writer) {
  message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.rpc.UpdatePrice.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.rpc.UpdatePrice.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
  f = this.getMarket();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = this.getLast();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.rpc.MarketLastResponse.serializeBinaryToWriter
    );
  }
};


/**
 * Creates a deep clone of this proto. No data is shared with the original.
 * @return {!proto.rpc.UpdatePrice} The clone.
 */
proto.rpc.UpdatePrice.prototype.cloneMessage = function() {
  return /** @type {!proto.rpc.UpdatePrice} */ (jspb.Message.cloneMessage(this));
};


/**
 * optional string market = 1;
 * @return {string}
 */
proto.rpc.UpdatePrice.prototype.getMarket = function() {
  return /** @type {string} */ (jspb.Message.getFieldProto3(this, 1, ""));
};


/** @param {string} value  */
proto.rpc.UpdatePrice.prototype.setMarket = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * optional MarketLastResponse last = 2;
 * @return {proto.rpc.MarketLastResponse}
 */
proto.rpc.UpdatePrice.prototype.getLast = function() {
  return /** @type{proto.rpc.MarketLastResponse} */ (
    jspb.Message.getWrapperField(this, proto.rpc.MarketLastResponse, 2));
};


/** @param {proto.rpc.MarketLastResponse|undefined} value  */
proto.rpc.UpdatePrice.prototype.setLast = function(value) {
  jspb.Message.setWrapperField(this, 2, value);
};


proto.rpc.UpdatePrice.prototype.clearLast = function() {
  this.setLast(undefined);
};


/**
 * Returns whether this field is set.
 * @return{!boolean}
 */
proto.rpc.UpdatePrice.prototype.hasLast = function() {
  return jspb.Message.getField(this, 2) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.rpc.UnsubscribePrice = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.rpc.UnsubscribePrice, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.rpc.UnsubscribePrice.displayName = 'proto.rpc.UnsubscribePrice';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.rpc.UnsubscribePrice.prototype.toObject = function(opt_includeInstance) {
  return proto.rpc.UnsubscribePrice.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.rpc.UnsubscribePrice} msg The msg instance to transform.
 * @return {!Object}
 */
proto.rpc.UnsubscribePrice.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.rpc.UnsubscribePrice}
 */
proto.rpc.UnsubscribePrice.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.rpc.UnsubscribePrice;
  return proto.rpc.UnsubscribePrice.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.rpc.UnsubscribePrice} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.rpc.UnsubscribePrice}
 */
proto.rpc.UnsubscribePrice.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.rpc.UnsubscribePrice} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.rpc.UnsubscribePrice.serializeBinaryToWriter = function(message, writer) {
  message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.rpc.UnsubscribePrice.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.rpc.UnsubscribePrice.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
};


/**
 * Creates a deep clone of this proto. No data is shared with the original.
 * @return {!proto.rpc.UnsubscribePrice} The clone.
 */
proto.rpc.UnsubscribePrice.prototype.cloneMessage = function() {
  return /** @type {!proto.rpc.UnsubscribePrice} */ (jspb.Message.cloneMessage(this));
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.rpc.SubscribeDeals = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.rpc.SubscribeDeals, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.rpc.SubscribeDeals.displayName = 'proto.rpc.SubscribeDeals';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.rpc.SubscribeDeals.prototype.toObject = function(opt_includeInstance) {
  return proto.rpc.SubscribeDeals.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.rpc.SubscribeDeals} msg The msg instance to transform.
 * @return {!Object}
 */
proto.rpc.SubscribeDeals.toObject = function(includeInstance, msg) {
  var f, obj = {
    market: msg.getMarket(),
    limit: msg.getLimit(),
    interval: msg.getInterval()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.rpc.SubscribeDeals}
 */
proto.rpc.SubscribeDeals.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.rpc.SubscribeDeals;
  return proto.rpc.SubscribeDeals.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.rpc.SubscribeDeals} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.rpc.SubscribeDeals}
 */
proto.rpc.SubscribeDeals.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setMarket(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setLimit(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setInterval(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.rpc.SubscribeDeals} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.rpc.SubscribeDeals.serializeBinaryToWriter = function(message, writer) {
  message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.rpc.SubscribeDeals.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.rpc.SubscribeDeals.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
  f = this.getMarket();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = this.getLimit();
  if (f !== 0) {
    writer.writeUint32(
      2,
      f
    );
  }
  f = this.getInterval();
  if (f !== 0) {
    writer.writeUint32(
      3,
      f
    );
  }
};


/**
 * Creates a deep clone of this proto. No data is shared with the original.
 * @return {!proto.rpc.SubscribeDeals} The clone.
 */
proto.rpc.SubscribeDeals.prototype.cloneMessage = function() {
  return /** @type {!proto.rpc.SubscribeDeals} */ (jspb.Message.cloneMessage(this));
};


/**
 * optional string market = 1;
 * @return {string}
 */
proto.rpc.SubscribeDeals.prototype.getMarket = function() {
  return /** @type {string} */ (jspb.Message.getFieldProto3(this, 1, ""));
};


/** @param {string} value  */
proto.rpc.SubscribeDeals.prototype.setMarket = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * optional uint32 limit = 2;
 * @return {number}
 */
proto.rpc.SubscribeDeals.prototype.getLimit = function() {
  return /** @type {number} */ (jspb.Message.getFieldProto3(this, 2, 0));
};


/** @param {number} value  */
proto.rpc.SubscribeDeals.prototype.setLimit = function(value) {
  jspb.Message.setField(this, 2, value);
};


/**
 * optional uint32 interval = 3;
 * @return {number}
 */
proto.rpc.SubscribeDeals.prototype.getInterval = function() {
  return /** @type {number} */ (jspb.Message.getFieldProto3(this, 3, 0));
};


/** @param {number} value  */
proto.rpc.SubscribeDeals.prototype.setInterval = function(value) {
  jspb.Message.setField(this, 3, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.rpc.UpdateDeals = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.rpc.UpdateDeals, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.rpc.UpdateDeals.displayName = 'proto.rpc.UpdateDeals';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.rpc.UpdateDeals.prototype.toObject = function(opt_includeInstance) {
  return proto.rpc.UpdateDeals.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.rpc.UpdateDeals} msg The msg instance to transform.
 * @return {!Object}
 */
proto.rpc.UpdateDeals.toObject = function(includeInstance, msg) {
  var f, obj = {
    market: msg.getMarket(),
    deals: (f = msg.getDeals()) && proto.rpc.MarketDealsResponse.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.rpc.UpdateDeals}
 */
proto.rpc.UpdateDeals.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.rpc.UpdateDeals;
  return proto.rpc.UpdateDeals.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.rpc.UpdateDeals} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.rpc.UpdateDeals}
 */
proto.rpc.UpdateDeals.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setMarket(value);
      break;
    case 2:
      var value = new proto.rpc.MarketDealsResponse;
      reader.readMessage(value,proto.rpc.MarketDealsResponse.deserializeBinaryFromReader);
      msg.setDeals(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.rpc.UpdateDeals} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.rpc.UpdateDeals.serializeBinaryToWriter = function(message, writer) {
  message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.rpc.UpdateDeals.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.rpc.UpdateDeals.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
  f = this.getMarket();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = this.getDeals();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.rpc.MarketDealsResponse.serializeBinaryToWriter
    );
  }
};


/**
 * Creates a deep clone of this proto. No data is shared with the original.
 * @return {!proto.rpc.UpdateDeals} The clone.
 */
proto.rpc.UpdateDeals.prototype.cloneMessage = function() {
  return /** @type {!proto.rpc.UpdateDeals} */ (jspb.Message.cloneMessage(this));
};


/**
 * optional string market = 1;
 * @return {string}
 */
proto.rpc.UpdateDeals.prototype.getMarket = function() {
  return /** @type {string} */ (jspb.Message.getFieldProto3(this, 1, ""));
};


/** @param {string} value  */
proto.rpc.UpdateDeals.prototype.setMarket = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * optional MarketDealsResponse deals = 2;
 * @return {proto.rpc.MarketDealsResponse}
 */
proto.rpc.UpdateDeals.prototype.getDeals = function() {
  return /** @type{proto.rpc.MarketDealsResponse} */ (
    jspb.Message.getWrapperField(this, proto.rpc.MarketDealsResponse, 2));
};


/** @param {proto.rpc.MarketDealsResponse|undefined} value  */
proto.rpc.UpdateDeals.prototype.setDeals = function(value) {
  jspb.Message.setWrapperField(this, 2, value);
};


proto.rpc.UpdateDeals.prototype.clearDeals = function() {
  this.setDeals(undefined);
};


/**
 * Returns whether this field is set.
 * @return{!boolean}
 */
proto.rpc.UpdateDeals.prototype.hasDeals = function() {
  return jspb.Message.getField(this, 2) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.rpc.UnsubscribeDeals = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.rpc.UnsubscribeDeals, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.rpc.UnsubscribeDeals.displayName = 'proto.rpc.UnsubscribeDeals';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.rpc.UnsubscribeDeals.prototype.toObject = function(opt_includeInstance) {
  return proto.rpc.UnsubscribeDeals.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.rpc.UnsubscribeDeals} msg The msg instance to transform.
 * @return {!Object}
 */
proto.rpc.UnsubscribeDeals.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.rpc.UnsubscribeDeals}
 */
proto.rpc.UnsubscribeDeals.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.rpc.UnsubscribeDeals;
  return proto.rpc.UnsubscribeDeals.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.rpc.UnsubscribeDeals} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.rpc.UnsubscribeDeals}
 */
proto.rpc.UnsubscribeDeals.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.rpc.UnsubscribeDeals} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.rpc.UnsubscribeDeals.serializeBinaryToWriter = function(message, writer) {
  message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.rpc.UnsubscribeDeals.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.rpc.UnsubscribeDeals.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
};


/**
 * Creates a deep clone of this proto. No data is shared with the original.
 * @return {!proto.rpc.UnsubscribeDeals} The clone.
 */
proto.rpc.UnsubscribeDeals.prototype.cloneMessage = function() {
  return /** @type {!proto.rpc.UnsubscribeDeals} */ (jspb.Message.cloneMessage(this));
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.rpc.SubscribeBalance = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.rpc.SubscribeBalance.repeatedFields_, null);
};
goog.inherits(proto.rpc.SubscribeBalance, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.rpc.SubscribeBalance.displayName = 'proto.rpc.SubscribeBalance';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.rpc.SubscribeBalance.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.rpc.SubscribeBalance.prototype.toObject = function(opt_includeInstance) {
  return proto.rpc.SubscribeBalance.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.rpc.SubscribeBalance} msg The msg instance to transform.
 * @return {!Object}
 */
proto.rpc.SubscribeBalance.toObject = function(includeInstance, msg) {
  var f, obj = {
    assetsList: jspb.Message.getField(msg, 1)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.rpc.SubscribeBalance}
 */
proto.rpc.SubscribeBalance.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.rpc.SubscribeBalance;
  return proto.rpc.SubscribeBalance.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.rpc.SubscribeBalance} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.rpc.SubscribeBalance}
 */
proto.rpc.SubscribeBalance.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.getAssetsList().push(value);
      msg.setAssetsList(msg.getAssetsList());
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.rpc.SubscribeBalance} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.rpc.SubscribeBalance.serializeBinaryToWriter = function(message, writer) {
  message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.rpc.SubscribeBalance.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.rpc.SubscribeBalance.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
  f = this.getAssetsList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      1,
      f
    );
  }
};


/**
 * Creates a deep clone of this proto. No data is shared with the original.
 * @return {!proto.rpc.SubscribeBalance} The clone.
 */
proto.rpc.SubscribeBalance.prototype.cloneMessage = function() {
  return /** @type {!proto.rpc.SubscribeBalance} */ (jspb.Message.cloneMessage(this));
};


/**
 * repeated string assets = 1;
 * If you change this array by adding, removing or replacing elements, or if you
 * replace the array itself, then you must call the setter to update it.
 * @return {!Array.<string>}
 */
proto.rpc.SubscribeBalance.prototype.getAssetsList = function() {
  return /** @type {!Array.<string>} */ (jspb.Message.getField(this, 1));
};


/** @param {Array.<string>} value  */
proto.rpc.SubscribeBalance.prototype.setAssetsList = function(value) {
  jspb.Message.setField(this, 1, value || []);
};


proto.rpc.SubscribeBalance.prototype.clearAssetsList = function() {
  jspb.Message.setField(this, 1, []);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.rpc.UnsubscribeBalance = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.rpc.UnsubscribeBalance, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.rpc.UnsubscribeBalance.displayName = 'proto.rpc.UnsubscribeBalance';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.rpc.UnsubscribeBalance.prototype.toObject = function(opt_includeInstance) {
  return proto.rpc.UnsubscribeBalance.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.rpc.UnsubscribeBalance} msg The msg instance to transform.
 * @return {!Object}
 */
proto.rpc.UnsubscribeBalance.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.rpc.UnsubscribeBalance}
 */
proto.rpc.UnsubscribeBalance.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.rpc.UnsubscribeBalance;
  return proto.rpc.UnsubscribeBalance.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.rpc.UnsubscribeBalance} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.rpc.UnsubscribeBalance}
 */
proto.rpc.UnsubscribeBalance.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.rpc.UnsubscribeBalance} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.rpc.UnsubscribeBalance.serializeBinaryToWriter = function(message, writer) {
  message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.rpc.UnsubscribeBalance.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.rpc.UnsubscribeBalance.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
};


/**
 * Creates a deep clone of this proto. No data is shared with the original.
 * @return {!proto.rpc.UnsubscribeBalance} The clone.
 */
proto.rpc.UnsubscribeBalance.prototype.cloneMessage = function() {
  return /** @type {!proto.rpc.UnsubscribeBalance} */ (jspb.Message.cloneMessage(this));
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.rpc.SubscribeKline = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.rpc.SubscribeKline, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.rpc.SubscribeKline.displayName = 'proto.rpc.SubscribeKline';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.rpc.SubscribeKline.prototype.toObject = function(opt_includeInstance) {
  return proto.rpc.SubscribeKline.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.rpc.SubscribeKline} msg The msg instance to transform.
 * @return {!Object}
 */
proto.rpc.SubscribeKline.toObject = function(includeInstance, msg) {
  var f, obj = {
    market: msg.getMarket(),
    interval: msg.getInterval()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.rpc.SubscribeKline}
 */
proto.rpc.SubscribeKline.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.rpc.SubscribeKline;
  return proto.rpc.SubscribeKline.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.rpc.SubscribeKline} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.rpc.SubscribeKline}
 */
proto.rpc.SubscribeKline.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setMarket(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setInterval(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.rpc.SubscribeKline} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.rpc.SubscribeKline.serializeBinaryToWriter = function(message, writer) {
  message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.rpc.SubscribeKline.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.rpc.SubscribeKline.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
  f = this.getMarket();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = this.getInterval();
  if (f !== 0) {
    writer.writeUint32(
      2,
      f
    );
  }
};


/**
 * Creates a deep clone of this proto. No data is shared with the original.
 * @return {!proto.rpc.SubscribeKline} The clone.
 */
proto.rpc.SubscribeKline.prototype.cloneMessage = function() {
  return /** @type {!proto.rpc.SubscribeKline} */ (jspb.Message.cloneMessage(this));
};


/**
 * optional string market = 1;
 * @return {string}
 */
proto.rpc.SubscribeKline.prototype.getMarket = function() {
  return /** @type {string} */ (jspb.Message.getFieldProto3(this, 1, ""));
};


/** @param {string} value  */
proto.rpc.SubscribeKline.prototype.setMarket = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * optional uint32 interval = 2;
 * @return {number}
 */
proto.rpc.SubscribeKline.prototype.getInterval = function() {
  return /** @type {number} */ (jspb.Message.getFieldProto3(this, 2, 0));
};


/** @param {number} value  */
proto.rpc.SubscribeKline.prototype.setInterval = function(value) {
  jspb.Message.setField(this, 2, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.rpc.UnsubscribeKline = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.rpc.UnsubscribeKline, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.rpc.UnsubscribeKline.displayName = 'proto.rpc.UnsubscribeKline';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.rpc.UnsubscribeKline.prototype.toObject = function(opt_includeInstance) {
  return proto.rpc.UnsubscribeKline.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.rpc.UnsubscribeKline} msg The msg instance to transform.
 * @return {!Object}
 */
proto.rpc.UnsubscribeKline.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.rpc.UnsubscribeKline}
 */
proto.rpc.UnsubscribeKline.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.rpc.UnsubscribeKline;
  return proto.rpc.UnsubscribeKline.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.rpc.UnsubscribeKline} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.rpc.UnsubscribeKline}
 */
proto.rpc.UnsubscribeKline.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.rpc.UnsubscribeKline} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.rpc.UnsubscribeKline.serializeBinaryToWriter = function(message, writer) {
  message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.rpc.UnsubscribeKline.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.rpc.UnsubscribeKline.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
};


/**
 * Creates a deep clone of this proto. No data is shared with the original.
 * @return {!proto.rpc.UnsubscribeKline} The clone.
 */
proto.rpc.UnsubscribeKline.prototype.cloneMessage = function() {
  return /** @type {!proto.rpc.UnsubscribeKline} */ (jspb.Message.cloneMessage(this));
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.rpc.SubscribeDepth = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.rpc.SubscribeDepth, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.rpc.SubscribeDepth.displayName = 'proto.rpc.SubscribeDepth';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.rpc.SubscribeDepth.prototype.toObject = function(opt_includeInstance) {
  return proto.rpc.SubscribeDepth.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.rpc.SubscribeDepth} msg The msg instance to transform.
 * @return {!Object}
 */
proto.rpc.SubscribeDepth.toObject = function(includeInstance, msg) {
  var f, obj = {
    market: msg.getMarket(),
    limit: msg.getLimit(),
    interval: msg.getInterval()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.rpc.SubscribeDepth}
 */
proto.rpc.SubscribeDepth.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.rpc.SubscribeDepth;
  return proto.rpc.SubscribeDepth.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.rpc.SubscribeDepth} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.rpc.SubscribeDepth}
 */
proto.rpc.SubscribeDepth.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setMarket(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setLimit(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setInterval(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.rpc.SubscribeDepth} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.rpc.SubscribeDepth.serializeBinaryToWriter = function(message, writer) {
  message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.rpc.SubscribeDepth.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.rpc.SubscribeDepth.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
  f = this.getMarket();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = this.getLimit();
  if (f !== 0) {
    writer.writeUint32(
      2,
      f
    );
  }
  f = this.getInterval();
  if (f !== 0) {
    writer.writeUint32(
      3,
      f
    );
  }
};


/**
 * Creates a deep clone of this proto. No data is shared with the original.
 * @return {!proto.rpc.SubscribeDepth} The clone.
 */
proto.rpc.SubscribeDepth.prototype.cloneMessage = function() {
  return /** @type {!proto.rpc.SubscribeDepth} */ (jspb.Message.cloneMessage(this));
};


/**
 * optional string market = 1;
 * @return {string}
 */
proto.rpc.SubscribeDepth.prototype.getMarket = function() {
  return /** @type {string} */ (jspb.Message.getFieldProto3(this, 1, ""));
};


/** @param {string} value  */
proto.rpc.SubscribeDepth.prototype.setMarket = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * optional uint32 limit = 2;
 * @return {number}
 */
proto.rpc.SubscribeDepth.prototype.getLimit = function() {
  return /** @type {number} */ (jspb.Message.getFieldProto3(this, 2, 0));
};


/** @param {number} value  */
proto.rpc.SubscribeDepth.prototype.setLimit = function(value) {
  jspb.Message.setField(this, 2, value);
};


/**
 * optional uint32 interval = 3;
 * @return {number}
 */
proto.rpc.SubscribeDepth.prototype.getInterval = function() {
  return /** @type {number} */ (jspb.Message.getFieldProto3(this, 3, 0));
};


/** @param {number} value  */
proto.rpc.SubscribeDepth.prototype.setInterval = function(value) {
  jspb.Message.setField(this, 3, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.rpc.UnsubscribeDepth = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.rpc.UnsubscribeDepth, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.rpc.UnsubscribeDepth.displayName = 'proto.rpc.UnsubscribeDepth';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.rpc.UnsubscribeDepth.prototype.toObject = function(opt_includeInstance) {
  return proto.rpc.UnsubscribeDepth.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.rpc.UnsubscribeDepth} msg The msg instance to transform.
 * @return {!Object}
 */
proto.rpc.UnsubscribeDepth.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.rpc.UnsubscribeDepth}
 */
proto.rpc.UnsubscribeDepth.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.rpc.UnsubscribeDepth;
  return proto.rpc.UnsubscribeDepth.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.rpc.UnsubscribeDepth} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.rpc.UnsubscribeDepth}
 */
proto.rpc.UnsubscribeDepth.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.rpc.UnsubscribeDepth} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.rpc.UnsubscribeDepth.serializeBinaryToWriter = function(message, writer) {
  message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.rpc.UnsubscribeDepth.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.rpc.UnsubscribeDepth.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
};


/**
 * Creates a deep clone of this proto. No data is shared with the original.
 * @return {!proto.rpc.UnsubscribeDepth} The clone.
 */
proto.rpc.UnsubscribeDepth.prototype.cloneMessage = function() {
  return /** @type {!proto.rpc.UnsubscribeDepth} */ (jspb.Message.cloneMessage(this));
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.rpc.SubscribeOrders = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.rpc.SubscribeOrders.repeatedFields_, null);
};
goog.inherits(proto.rpc.SubscribeOrders, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.rpc.SubscribeOrders.displayName = 'proto.rpc.SubscribeOrders';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.rpc.SubscribeOrders.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.rpc.SubscribeOrders.prototype.toObject = function(opt_includeInstance) {
  return proto.rpc.SubscribeOrders.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.rpc.SubscribeOrders} msg The msg instance to transform.
 * @return {!Object}
 */
proto.rpc.SubscribeOrders.toObject = function(includeInstance, msg) {
  var f, obj = {
    marketsList: jspb.Message.getField(msg, 1)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.rpc.SubscribeOrders}
 */
proto.rpc.SubscribeOrders.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.rpc.SubscribeOrders;
  return proto.rpc.SubscribeOrders.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.rpc.SubscribeOrders} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.rpc.SubscribeOrders}
 */
proto.rpc.SubscribeOrders.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Array.<!proto.rpc.Market>} */ (reader.readPackedEnum());
      msg.setMarketsList(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.rpc.SubscribeOrders} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.rpc.SubscribeOrders.serializeBinaryToWriter = function(message, writer) {
  message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.rpc.SubscribeOrders.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.rpc.SubscribeOrders.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
  f = this.getMarketsList();
  if (f.length > 0) {
    writer.writePackedEnum(
      1,
      f
    );
  }
};


/**
 * Creates a deep clone of this proto. No data is shared with the original.
 * @return {!proto.rpc.SubscribeOrders} The clone.
 */
proto.rpc.SubscribeOrders.prototype.cloneMessage = function() {
  return /** @type {!proto.rpc.SubscribeOrders} */ (jspb.Message.cloneMessage(this));
};


/**
 * repeated Market markets = 1;
 * If you change this array by adding, removing or replacing elements, or if you
 * replace the array itself, then you must call the setter to update it.
 * @return {!Array.<!proto.rpc.Market>}
 */
proto.rpc.SubscribeOrders.prototype.getMarketsList = function() {
  return /** @type {!Array.<!proto.rpc.Market>} */ (jspb.Message.getField(this, 1));
};


/** @param {!Array.<!proto.rpc.Market>} value  */
proto.rpc.SubscribeOrders.prototype.setMarketsList = function(value) {
  jspb.Message.setField(this, 1, value || []);
};


proto.rpc.SubscribeOrders.prototype.clearMarketsList = function() {
  jspb.Message.setField(this, 1, []);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.rpc.UnsubscribeOrders = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.rpc.UnsubscribeOrders, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.rpc.UnsubscribeOrders.displayName = 'proto.rpc.UnsubscribeOrders';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.rpc.UnsubscribeOrders.prototype.toObject = function(opt_includeInstance) {
  return proto.rpc.UnsubscribeOrders.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.rpc.UnsubscribeOrders} msg The msg instance to transform.
 * @return {!Object}
 */
proto.rpc.UnsubscribeOrders.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.rpc.UnsubscribeOrders}
 */
proto.rpc.UnsubscribeOrders.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.rpc.UnsubscribeOrders;
  return proto.rpc.UnsubscribeOrders.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.rpc.UnsubscribeOrders} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.rpc.UnsubscribeOrders}
 */
proto.rpc.UnsubscribeOrders.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.rpc.UnsubscribeOrders} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.rpc.UnsubscribeOrders.serializeBinaryToWriter = function(message, writer) {
  message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.rpc.UnsubscribeOrders.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.rpc.UnsubscribeOrders.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
};


/**
 * Creates a deep clone of this proto. No data is shared with the original.
 * @return {!proto.rpc.UnsubscribeOrders} The clone.
 */
proto.rpc.UnsubscribeOrders.prototype.cloneMessage = function() {
  return /** @type {!proto.rpc.UnsubscribeOrders} */ (jspb.Message.cloneMessage(this));
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.rpc.OrderDetailedInfo = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.rpc.OrderDetailedInfo, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.rpc.OrderDetailedInfo.displayName = 'proto.rpc.OrderDetailedInfo';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.rpc.OrderDetailedInfo.prototype.toObject = function(opt_includeInstance) {
  return proto.rpc.OrderDetailedInfo.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.rpc.OrderDetailedInfo} msg The msg instance to transform.
 * @return {!Object}
 */
proto.rpc.OrderDetailedInfo.toObject = function(includeInstance, msg) {
  var f, obj = {
    orderId: msg.getOrderId(),
    user: msg.getUser(),
    amount: msg.getAmount(),
    price: msg.getPrice(),
    side: msg.getSide(),
    market: msg.getMarket(),
    source: msg.getSource(),
    feeRate: msg.getFeeRate(),
    dealStock: msg.getDealStock(),
    dealMoney: msg.getDealMoney(),
    dealFee: msg.getDealFee(),
    ctime: msg.getCtime(),
    mtime: msg.getMtime(),
    left: msg.getLeft()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.rpc.OrderDetailedInfo}
 */
proto.rpc.OrderDetailedInfo.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.rpc.OrderDetailedInfo;
  return proto.rpc.OrderDetailedInfo.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.rpc.OrderDetailedInfo} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.rpc.OrderDetailedInfo}
 */
proto.rpc.OrderDetailedInfo.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setOrderId(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setUser(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setAmount(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setPrice(value);
      break;
    case 5:
      var value = /** @type {!proto.rpc.MarketSide} */ (reader.readEnum());
      msg.setSide(value);
      break;
    case 6:
      var value = /** @type {string} */ (reader.readString());
      msg.setMarket(value);
      break;
    case 7:
      var value = /** @type {string} */ (reader.readString());
      msg.setSource(value);
      break;
    case 8:
      var value = /** @type {string} */ (reader.readString());
      msg.setFeeRate(value);
      break;
    case 9:
      var value = /** @type {string} */ (reader.readString());
      msg.setDealStock(value);
      break;
    case 10:
      var value = /** @type {string} */ (reader.readString());
      msg.setDealMoney(value);
      break;
    case 11:
      var value = /** @type {string} */ (reader.readString());
      msg.setDealFee(value);
      break;
    case 12:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setCtime(value);
      break;
    case 13:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setMtime(value);
      break;
    case 14:
      var value = /** @type {string} */ (reader.readString());
      msg.setLeft(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.rpc.OrderDetailedInfo} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.rpc.OrderDetailedInfo.serializeBinaryToWriter = function(message, writer) {
  message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.rpc.OrderDetailedInfo.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.rpc.OrderDetailedInfo.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
  f = this.getOrderId();
  if (f !== 0) {
    writer.writeUint32(
      1,
      f
    );
  }
  f = this.getUser();
  if (f !== 0) {
    writer.writeUint32(
      2,
      f
    );
  }
  f = this.getAmount();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = this.getPrice();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
  f = this.getSide();
  if (f !== 0.0) {
    writer.writeEnum(
      5,
      f
    );
  }
  f = this.getMarket();
  if (f.length > 0) {
    writer.writeString(
      6,
      f
    );
  }
  f = this.getSource();
  if (f.length > 0) {
    writer.writeString(
      7,
      f
    );
  }
  f = this.getFeeRate();
  if (f.length > 0) {
    writer.writeString(
      8,
      f
    );
  }
  f = this.getDealStock();
  if (f.length > 0) {
    writer.writeString(
      9,
      f
    );
  }
  f = this.getDealMoney();
  if (f.length > 0) {
    writer.writeString(
      10,
      f
    );
  }
  f = this.getDealFee();
  if (f.length > 0) {
    writer.writeString(
      11,
      f
    );
  }
  f = this.getCtime();
  if (f !== 0.0) {
    writer.writeDouble(
      12,
      f
    );
  }
  f = this.getMtime();
  if (f !== 0.0) {
    writer.writeDouble(
      13,
      f
    );
  }
  f = this.getLeft();
  if (f.length > 0) {
    writer.writeString(
      14,
      f
    );
  }
};


/**
 * Creates a deep clone of this proto. No data is shared with the original.
 * @return {!proto.rpc.OrderDetailedInfo} The clone.
 */
proto.rpc.OrderDetailedInfo.prototype.cloneMessage = function() {
  return /** @type {!proto.rpc.OrderDetailedInfo} */ (jspb.Message.cloneMessage(this));
};


/**
 * optional uint32 order_id = 1;
 * @return {number}
 */
proto.rpc.OrderDetailedInfo.prototype.getOrderId = function() {
  return /** @type {number} */ (jspb.Message.getFieldProto3(this, 1, 0));
};


/** @param {number} value  */
proto.rpc.OrderDetailedInfo.prototype.setOrderId = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * optional uint32 user = 2;
 * @return {number}
 */
proto.rpc.OrderDetailedInfo.prototype.getUser = function() {
  return /** @type {number} */ (jspb.Message.getFieldProto3(this, 2, 0));
};


/** @param {number} value  */
proto.rpc.OrderDetailedInfo.prototype.setUser = function(value) {
  jspb.Message.setField(this, 2, value);
};


/**
 * optional string amount = 3;
 * @return {string}
 */
proto.rpc.OrderDetailedInfo.prototype.getAmount = function() {
  return /** @type {string} */ (jspb.Message.getFieldProto3(this, 3, ""));
};


/** @param {string} value  */
proto.rpc.OrderDetailedInfo.prototype.setAmount = function(value) {
  jspb.Message.setField(this, 3, value);
};


/**
 * optional string price = 4;
 * @return {string}
 */
proto.rpc.OrderDetailedInfo.prototype.getPrice = function() {
  return /** @type {string} */ (jspb.Message.getFieldProto3(this, 4, ""));
};


/** @param {string} value  */
proto.rpc.OrderDetailedInfo.prototype.setPrice = function(value) {
  jspb.Message.setField(this, 4, value);
};


/**
 * optional MarketSide side = 5;
 * @return {!proto.rpc.MarketSide}
 */
proto.rpc.OrderDetailedInfo.prototype.getSide = function() {
  return /** @type {!proto.rpc.MarketSide} */ (jspb.Message.getFieldProto3(this, 5, 0));
};


/** @param {!proto.rpc.MarketSide} value  */
proto.rpc.OrderDetailedInfo.prototype.setSide = function(value) {
  jspb.Message.setField(this, 5, value);
};


/**
 * optional string market = 6;
 * @return {string}
 */
proto.rpc.OrderDetailedInfo.prototype.getMarket = function() {
  return /** @type {string} */ (jspb.Message.getFieldProto3(this, 6, ""));
};


/** @param {string} value  */
proto.rpc.OrderDetailedInfo.prototype.setMarket = function(value) {
  jspb.Message.setField(this, 6, value);
};


/**
 * optional string source = 7;
 * @return {string}
 */
proto.rpc.OrderDetailedInfo.prototype.getSource = function() {
  return /** @type {string} */ (jspb.Message.getFieldProto3(this, 7, ""));
};


/** @param {string} value  */
proto.rpc.OrderDetailedInfo.prototype.setSource = function(value) {
  jspb.Message.setField(this, 7, value);
};


/**
 * optional string fee_rate = 8;
 * @return {string}
 */
proto.rpc.OrderDetailedInfo.prototype.getFeeRate = function() {
  return /** @type {string} */ (jspb.Message.getFieldProto3(this, 8, ""));
};


/** @param {string} value  */
proto.rpc.OrderDetailedInfo.prototype.setFeeRate = function(value) {
  jspb.Message.setField(this, 8, value);
};


/**
 * optional string deal_stock = 9;
 * @return {string}
 */
proto.rpc.OrderDetailedInfo.prototype.getDealStock = function() {
  return /** @type {string} */ (jspb.Message.getFieldProto3(this, 9, ""));
};


/** @param {string} value  */
proto.rpc.OrderDetailedInfo.prototype.setDealStock = function(value) {
  jspb.Message.setField(this, 9, value);
};


/**
 * optional string deal_money = 10;
 * @return {string}
 */
proto.rpc.OrderDetailedInfo.prototype.getDealMoney = function() {
  return /** @type {string} */ (jspb.Message.getFieldProto3(this, 10, ""));
};


/** @param {string} value  */
proto.rpc.OrderDetailedInfo.prototype.setDealMoney = function(value) {
  jspb.Message.setField(this, 10, value);
};


/**
 * optional string deal_fee = 11;
 * @return {string}
 */
proto.rpc.OrderDetailedInfo.prototype.getDealFee = function() {
  return /** @type {string} */ (jspb.Message.getFieldProto3(this, 11, ""));
};


/** @param {string} value  */
proto.rpc.OrderDetailedInfo.prototype.setDealFee = function(value) {
  jspb.Message.setField(this, 11, value);
};


/**
 * optional double ctime = 12;
 * @return {number}
 */
proto.rpc.OrderDetailedInfo.prototype.getCtime = function() {
  return /** @type {number} */ (jspb.Message.getFieldProto3(this, 12, 0));
};


/** @param {number} value  */
proto.rpc.OrderDetailedInfo.prototype.setCtime = function(value) {
  jspb.Message.setField(this, 12, value);
};


/**
 * optional double mtime = 13;
 * @return {number}
 */
proto.rpc.OrderDetailedInfo.prototype.getMtime = function() {
  return /** @type {number} */ (jspb.Message.getFieldProto3(this, 13, 0));
};


/** @param {number} value  */
proto.rpc.OrderDetailedInfo.prototype.setMtime = function(value) {
  jspb.Message.setField(this, 13, value);
};


/**
 * optional string left = 14;
 * @return {string}
 */
proto.rpc.OrderDetailedInfo.prototype.getLeft = function() {
  return /** @type {string} */ (jspb.Message.getFieldProto3(this, 14, ""));
};


/** @param {string} value  */
proto.rpc.OrderDetailedInfo.prototype.setLeft = function(value) {
  jspb.Message.setField(this, 14, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.rpc.KLine = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.rpc.KLine, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.rpc.KLine.displayName = 'proto.rpc.KLine';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.rpc.KLine.prototype.toObject = function(opt_includeInstance) {
  return proto.rpc.KLine.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.rpc.KLine} msg The msg instance to transform.
 * @return {!Object}
 */
proto.rpc.KLine.toObject = function(includeInstance, msg) {
  var f, obj = {
    time: msg.getTime(),
    openPrice: msg.getOpenPrice(),
    closePrice: msg.getClosePrice(),
    maxPrice: msg.getMaxPrice(),
    minPrice: msg.getMinPrice(),
    number: msg.getNumber(),
    volume: msg.getVolume(),
    market: msg.getMarket()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.rpc.KLine}
 */
proto.rpc.KLine.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.rpc.KLine;
  return proto.rpc.KLine.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.rpc.KLine} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.rpc.KLine}
 */
proto.rpc.KLine.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setTime(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setOpenPrice(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setClosePrice(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setMaxPrice(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.setMinPrice(value);
      break;
    case 6:
      var value = /** @type {string} */ (reader.readString());
      msg.setNumber(value);
      break;
    case 7:
      var value = /** @type {string} */ (reader.readString());
      msg.setVolume(value);
      break;
    case 8:
      var value = /** @type {string} */ (reader.readString());
      msg.setMarket(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.rpc.KLine} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.rpc.KLine.serializeBinaryToWriter = function(message, writer) {
  message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.rpc.KLine.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.rpc.KLine.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
  f = this.getTime();
  if (f !== 0.0) {
    writer.writeDouble(
      1,
      f
    );
  }
  f = this.getOpenPrice();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = this.getClosePrice();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = this.getMaxPrice();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
  f = this.getMinPrice();
  if (f.length > 0) {
    writer.writeString(
      5,
      f
    );
  }
  f = this.getNumber();
  if (f.length > 0) {
    writer.writeString(
      6,
      f
    );
  }
  f = this.getVolume();
  if (f.length > 0) {
    writer.writeString(
      7,
      f
    );
  }
  f = this.getMarket();
  if (f.length > 0) {
    writer.writeString(
      8,
      f
    );
  }
};


/**
 * Creates a deep clone of this proto. No data is shared with the original.
 * @return {!proto.rpc.KLine} The clone.
 */
proto.rpc.KLine.prototype.cloneMessage = function() {
  return /** @type {!proto.rpc.KLine} */ (jspb.Message.cloneMessage(this));
};


/**
 * optional double time = 1;
 * @return {number}
 */
proto.rpc.KLine.prototype.getTime = function() {
  return /** @type {number} */ (jspb.Message.getFieldProto3(this, 1, 0));
};


/** @param {number} value  */
proto.rpc.KLine.prototype.setTime = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * optional string open_price = 2;
 * @return {string}
 */
proto.rpc.KLine.prototype.getOpenPrice = function() {
  return /** @type {string} */ (jspb.Message.getFieldProto3(this, 2, ""));
};


/** @param {string} value  */
proto.rpc.KLine.prototype.setOpenPrice = function(value) {
  jspb.Message.setField(this, 2, value);
};


/**
 * optional string close_price = 3;
 * @return {string}
 */
proto.rpc.KLine.prototype.getClosePrice = function() {
  return /** @type {string} */ (jspb.Message.getFieldProto3(this, 3, ""));
};


/** @param {string} value  */
proto.rpc.KLine.prototype.setClosePrice = function(value) {
  jspb.Message.setField(this, 3, value);
};


/**
 * optional string max_price = 4;
 * @return {string}
 */
proto.rpc.KLine.prototype.getMaxPrice = function() {
  return /** @type {string} */ (jspb.Message.getFieldProto3(this, 4, ""));
};


/** @param {string} value  */
proto.rpc.KLine.prototype.setMaxPrice = function(value) {
  jspb.Message.setField(this, 4, value);
};


/**
 * optional string min_price = 5;
 * @return {string}
 */
proto.rpc.KLine.prototype.getMinPrice = function() {
  return /** @type {string} */ (jspb.Message.getFieldProto3(this, 5, ""));
};


/** @param {string} value  */
proto.rpc.KLine.prototype.setMinPrice = function(value) {
  jspb.Message.setField(this, 5, value);
};


/**
 * optional string number = 6;
 * @return {string}
 */
proto.rpc.KLine.prototype.getNumber = function() {
  return /** @type {string} */ (jspb.Message.getFieldProto3(this, 6, ""));
};


/** @param {string} value  */
proto.rpc.KLine.prototype.setNumber = function(value) {
  jspb.Message.setField(this, 6, value);
};


/**
 * optional string volume = 7;
 * @return {string}
 */
proto.rpc.KLine.prototype.getVolume = function() {
  return /** @type {string} */ (jspb.Message.getFieldProto3(this, 7, ""));
};


/** @param {string} value  */
proto.rpc.KLine.prototype.setVolume = function(value) {
  jspb.Message.setField(this, 7, value);
};


/**
 * optional string market = 8;
 * @return {string}
 */
proto.rpc.KLine.prototype.getMarket = function() {
  return /** @type {string} */ (jspb.Message.getFieldProto3(this, 8, ""));
};


/** @param {string} value  */
proto.rpc.KLine.prototype.setMarket = function(value) {
  jspb.Message.setField(this, 8, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.rpc.DealDetail = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.rpc.DealDetail, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.rpc.DealDetail.displayName = 'proto.rpc.DealDetail';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.rpc.DealDetail.prototype.toObject = function(opt_includeInstance) {
  return proto.rpc.DealDetail.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.rpc.DealDetail} msg The msg instance to transform.
 * @return {!Object}
 */
proto.rpc.DealDetail.toObject = function(includeInstance, msg) {
  var f, obj = {
    dealId: msg.getDealId(),
    time: msg.getTime(),
    amount: msg.getAmount(),
    user: msg.getUser(),
    fee: msg.getFee(),
    price: msg.getPrice(),
    deal: msg.getDeal(),
    dealOrderId: msg.getDealOrderId()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.rpc.DealDetail}
 */
proto.rpc.DealDetail.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.rpc.DealDetail;
  return proto.rpc.DealDetail.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.rpc.DealDetail} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.rpc.DealDetail}
 */
proto.rpc.DealDetail.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setDealId(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setTime(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setAmount(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setUser(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.setFee(value);
      break;
    case 6:
      var value = /** @type {string} */ (reader.readString());
      msg.setPrice(value);
      break;
    case 7:
      var value = /** @type {string} */ (reader.readString());
      msg.setDeal(value);
      break;
    case 8:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setDealOrderId(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.rpc.DealDetail} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.rpc.DealDetail.serializeBinaryToWriter = function(message, writer) {
  message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.rpc.DealDetail.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.rpc.DealDetail.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
  f = this.getDealId();
  if (f !== 0) {
    writer.writeUint32(
      1,
      f
    );
  }
  f = this.getTime();
  if (f !== 0.0) {
    writer.writeDouble(
      2,
      f
    );
  }
  f = this.getAmount();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = this.getUser();
  if (f !== 0) {
    writer.writeUint32(
      4,
      f
    );
  }
  f = this.getFee();
  if (f.length > 0) {
    writer.writeString(
      5,
      f
    );
  }
  f = this.getPrice();
  if (f.length > 0) {
    writer.writeString(
      6,
      f
    );
  }
  f = this.getDeal();
  if (f.length > 0) {
    writer.writeString(
      7,
      f
    );
  }
  f = this.getDealOrderId();
  if (f !== 0) {
    writer.writeUint32(
      8,
      f
    );
  }
};


/**
 * Creates a deep clone of this proto. No data is shared with the original.
 * @return {!proto.rpc.DealDetail} The clone.
 */
proto.rpc.DealDetail.prototype.cloneMessage = function() {
  return /** @type {!proto.rpc.DealDetail} */ (jspb.Message.cloneMessage(this));
};


/**
 * optional uint32 deal_id = 1;
 * @return {number}
 */
proto.rpc.DealDetail.prototype.getDealId = function() {
  return /** @type {number} */ (jspb.Message.getFieldProto3(this, 1, 0));
};


/** @param {number} value  */
proto.rpc.DealDetail.prototype.setDealId = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * optional double time = 2;
 * @return {number}
 */
proto.rpc.DealDetail.prototype.getTime = function() {
  return /** @type {number} */ (jspb.Message.getFieldProto3(this, 2, 0));
};


/** @param {number} value  */
proto.rpc.DealDetail.prototype.setTime = function(value) {
  jspb.Message.setField(this, 2, value);
};


/**
 * optional string amount = 3;
 * @return {string}
 */
proto.rpc.DealDetail.prototype.getAmount = function() {
  return /** @type {string} */ (jspb.Message.getFieldProto3(this, 3, ""));
};


/** @param {string} value  */
proto.rpc.DealDetail.prototype.setAmount = function(value) {
  jspb.Message.setField(this, 3, value);
};


/**
 * optional uint32 user = 4;
 * @return {number}
 */
proto.rpc.DealDetail.prototype.getUser = function() {
  return /** @type {number} */ (jspb.Message.getFieldProto3(this, 4, 0));
};


/** @param {number} value  */
proto.rpc.DealDetail.prototype.setUser = function(value) {
  jspb.Message.setField(this, 4, value);
};


/**
 * optional string fee = 5;
 * @return {string}
 */
proto.rpc.DealDetail.prototype.getFee = function() {
  return /** @type {string} */ (jspb.Message.getFieldProto3(this, 5, ""));
};


/** @param {string} value  */
proto.rpc.DealDetail.prototype.setFee = function(value) {
  jspb.Message.setField(this, 5, value);
};


/**
 * optional string price = 6;
 * @return {string}
 */
proto.rpc.DealDetail.prototype.getPrice = function() {
  return /** @type {string} */ (jspb.Message.getFieldProto3(this, 6, ""));
};


/** @param {string} value  */
proto.rpc.DealDetail.prototype.setPrice = function(value) {
  jspb.Message.setField(this, 6, value);
};


/**
 * optional string deal = 7;
 * @return {string}
 */
proto.rpc.DealDetail.prototype.getDeal = function() {
  return /** @type {string} */ (jspb.Message.getFieldProto3(this, 7, ""));
};


/** @param {string} value  */
proto.rpc.DealDetail.prototype.setDeal = function(value) {
  jspb.Message.setField(this, 7, value);
};


/**
 * optional uint32 deal_order_id = 8;
 * @return {number}
 */
proto.rpc.DealDetail.prototype.getDealOrderId = function() {
  return /** @type {number} */ (jspb.Message.getFieldProto3(this, 8, 0));
};


/** @param {number} value  */
proto.rpc.DealDetail.prototype.setDealOrderId = function(value) {
  jspb.Message.setField(this, 8, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.rpc.Balance = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.rpc.Balance, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.rpc.Balance.displayName = 'proto.rpc.Balance';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.rpc.Balance.prototype.toObject = function(opt_includeInstance) {
  return proto.rpc.Balance.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.rpc.Balance} msg The msg instance to transform.
 * @return {!Object}
 */
proto.rpc.Balance.toObject = function(includeInstance, msg) {
  var f, obj = {
    available: msg.getAvailable(),
    freeze: msg.getFreeze()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.rpc.Balance}
 */
proto.rpc.Balance.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.rpc.Balance;
  return proto.rpc.Balance.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.rpc.Balance} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.rpc.Balance}
 */
proto.rpc.Balance.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setAvailable(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setFreeze(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.rpc.Balance} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.rpc.Balance.serializeBinaryToWriter = function(message, writer) {
  message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.rpc.Balance.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.rpc.Balance.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
  f = this.getAvailable();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = this.getFreeze();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * Creates a deep clone of this proto. No data is shared with the original.
 * @return {!proto.rpc.Balance} The clone.
 */
proto.rpc.Balance.prototype.cloneMessage = function() {
  return /** @type {!proto.rpc.Balance} */ (jspb.Message.cloneMessage(this));
};


/**
 * optional string available = 1;
 * @return {string}
 */
proto.rpc.Balance.prototype.getAvailable = function() {
  return /** @type {string} */ (jspb.Message.getFieldProto3(this, 1, ""));
};


/** @param {string} value  */
proto.rpc.Balance.prototype.setAvailable = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * optional string freeze = 2;
 * @return {string}
 */
proto.rpc.Balance.prototype.getFreeze = function() {
  return /** @type {string} */ (jspb.Message.getFieldProto3(this, 2, ""));
};


/** @param {string} value  */
proto.rpc.Balance.prototype.setFreeze = function(value) {
  jspb.Message.setField(this, 2, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.rpc.BalanceQueryRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.rpc.BalanceQueryRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.rpc.BalanceQueryRequest.displayName = 'proto.rpc.BalanceQueryRequest';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.rpc.BalanceQueryRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.rpc.BalanceQueryRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.rpc.BalanceQueryRequest} msg The msg instance to transform.
 * @return {!Object}
 */
proto.rpc.BalanceQueryRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    userId: msg.getUserId()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.rpc.BalanceQueryRequest}
 */
proto.rpc.BalanceQueryRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.rpc.BalanceQueryRequest;
  return proto.rpc.BalanceQueryRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.rpc.BalanceQueryRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.rpc.BalanceQueryRequest}
 */
proto.rpc.BalanceQueryRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setUserId(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.rpc.BalanceQueryRequest} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.rpc.BalanceQueryRequest.serializeBinaryToWriter = function(message, writer) {
  message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.rpc.BalanceQueryRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.rpc.BalanceQueryRequest.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
  f = this.getUserId();
  if (f !== 0) {
    writer.writeUint32(
      1,
      f
    );
  }
};


/**
 * Creates a deep clone of this proto. No data is shared with the original.
 * @return {!proto.rpc.BalanceQueryRequest} The clone.
 */
proto.rpc.BalanceQueryRequest.prototype.cloneMessage = function() {
  return /** @type {!proto.rpc.BalanceQueryRequest} */ (jspb.Message.cloneMessage(this));
};


/**
 * optional uint32 user_id = 1;
 * @return {number}
 */
proto.rpc.BalanceQueryRequest.prototype.getUserId = function() {
  return /** @type {number} */ (jspb.Message.getFieldProto3(this, 1, 0));
};


/** @param {number} value  */
proto.rpc.BalanceQueryRequest.prototype.setUserId = function(value) {
  jspb.Message.setField(this, 1, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.rpc.BalanceQueryResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.rpc.BalanceQueryResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.rpc.BalanceQueryResponse.displayName = 'proto.rpc.BalanceQueryResponse';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.rpc.BalanceQueryResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.rpc.BalanceQueryResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.rpc.BalanceQueryResponse} msg The msg instance to transform.
 * @return {!Object}
 */
proto.rpc.BalanceQueryResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    balancesMap: (f = msg.getBalancesMap(true)) ? f.toArray() : []
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.rpc.BalanceQueryResponse}
 */
proto.rpc.BalanceQueryResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.rpc.BalanceQueryResponse;
  return proto.rpc.BalanceQueryResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.rpc.BalanceQueryResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.rpc.BalanceQueryResponse}
 */
proto.rpc.BalanceQueryResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = msg.getBalancesMap();
      reader.readMessage(value, function(message, reader) {
        jspb.Map.deserializeBinary(message, reader, jspb.BinaryReader.prototype.readString, jspb.BinaryReader.prototype.readMessage, proto.rpc.Balance.deserializeBinaryFromReader);
         });
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.rpc.BalanceQueryResponse} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.rpc.BalanceQueryResponse.serializeBinaryToWriter = function(message, writer) {
  message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.rpc.BalanceQueryResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.rpc.BalanceQueryResponse.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
  f = this.getBalancesMap(true);
  if (f && f.getLength() > 0) {
    f.serializeBinary(1, writer, jspb.BinaryWriter.prototype.writeString, jspb.BinaryWriter.prototype.writeMessage, proto.rpc.Balance.serializeBinaryToWriter);
  }
};


/**
 * Creates a deep clone of this proto. No data is shared with the original.
 * @return {!proto.rpc.BalanceQueryResponse} The clone.
 */
proto.rpc.BalanceQueryResponse.prototype.cloneMessage = function() {
  return /** @type {!proto.rpc.BalanceQueryResponse} */ (jspb.Message.cloneMessage(this));
};


/**
 * map<string, Balance> balances = 1;
 * @param {boolean=} opt_noLazyCreate Do not create the map if
 * empty, instead returning `undefined`
 * @return {!jspb.Map<string,!proto.rpc.Balance>}
 */
proto.rpc.BalanceQueryResponse.prototype.getBalancesMap = function(opt_noLazyCreate) {
  return /** @type {!jspb.Map<string,!proto.rpc.Balance>} */ (
      jspb.Message.getMapField(this, 1, opt_noLazyCreate,
      proto.rpc.Balance));
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.rpc.BalanceWithdrawalRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.rpc.BalanceWithdrawalRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.rpc.BalanceWithdrawalRequest.displayName = 'proto.rpc.BalanceWithdrawalRequest';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.rpc.BalanceWithdrawalRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.rpc.BalanceWithdrawalRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.rpc.BalanceWithdrawalRequest} msg The msg instance to transform.
 * @return {!Object}
 */
proto.rpc.BalanceWithdrawalRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    userId: msg.getUserId(),
    asset: msg.getAsset(),
    actionId: msg.getActionId(),
    amount: msg.getAmount()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.rpc.BalanceWithdrawalRequest}
 */
proto.rpc.BalanceWithdrawalRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.rpc.BalanceWithdrawalRequest;
  return proto.rpc.BalanceWithdrawalRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.rpc.BalanceWithdrawalRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.rpc.BalanceWithdrawalRequest}
 */
proto.rpc.BalanceWithdrawalRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setUserId(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setAsset(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setActionId(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setAmount(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.rpc.BalanceWithdrawalRequest} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.rpc.BalanceWithdrawalRequest.serializeBinaryToWriter = function(message, writer) {
  message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.rpc.BalanceWithdrawalRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.rpc.BalanceWithdrawalRequest.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
  f = this.getUserId();
  if (f !== 0) {
    writer.writeUint32(
      1,
      f
    );
  }
  f = this.getAsset();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = this.getActionId();
  if (f !== 0) {
    writer.writeUint32(
      3,
      f
    );
  }
  f = this.getAmount();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
};


/**
 * Creates a deep clone of this proto. No data is shared with the original.
 * @return {!proto.rpc.BalanceWithdrawalRequest} The clone.
 */
proto.rpc.BalanceWithdrawalRequest.prototype.cloneMessage = function() {
  return /** @type {!proto.rpc.BalanceWithdrawalRequest} */ (jspb.Message.cloneMessage(this));
};


/**
 * optional uint32 user_id = 1;
 * @return {number}
 */
proto.rpc.BalanceWithdrawalRequest.prototype.getUserId = function() {
  return /** @type {number} */ (jspb.Message.getFieldProto3(this, 1, 0));
};


/** @param {number} value  */
proto.rpc.BalanceWithdrawalRequest.prototype.setUserId = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * optional string asset = 2;
 * @return {string}
 */
proto.rpc.BalanceWithdrawalRequest.prototype.getAsset = function() {
  return /** @type {string} */ (jspb.Message.getFieldProto3(this, 2, ""));
};


/** @param {string} value  */
proto.rpc.BalanceWithdrawalRequest.prototype.setAsset = function(value) {
  jspb.Message.setField(this, 2, value);
};


/**
 * optional uint32 action_id = 3;
 * @return {number}
 */
proto.rpc.BalanceWithdrawalRequest.prototype.getActionId = function() {
  return /** @type {number} */ (jspb.Message.getFieldProto3(this, 3, 0));
};


/** @param {number} value  */
proto.rpc.BalanceWithdrawalRequest.prototype.setActionId = function(value) {
  jspb.Message.setField(this, 3, value);
};


/**
 * optional string amount = 4;
 * @return {string}
 */
proto.rpc.BalanceWithdrawalRequest.prototype.getAmount = function() {
  return /** @type {string} */ (jspb.Message.getFieldProto3(this, 4, ""));
};


/** @param {string} value  */
proto.rpc.BalanceWithdrawalRequest.prototype.setAmount = function(value) {
  jspb.Message.setField(this, 4, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.rpc.BalanceWithdrawalResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.rpc.BalanceWithdrawalResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.rpc.BalanceWithdrawalResponse.displayName = 'proto.rpc.BalanceWithdrawalResponse';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.rpc.BalanceWithdrawalResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.rpc.BalanceWithdrawalResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.rpc.BalanceWithdrawalResponse} msg The msg instance to transform.
 * @return {!Object}
 */
proto.rpc.BalanceWithdrawalResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    status: msg.getStatus()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.rpc.BalanceWithdrawalResponse}
 */
proto.rpc.BalanceWithdrawalResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.rpc.BalanceWithdrawalResponse;
  return proto.rpc.BalanceWithdrawalResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.rpc.BalanceWithdrawalResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.rpc.BalanceWithdrawalResponse}
 */
proto.rpc.BalanceWithdrawalResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setStatus(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.rpc.BalanceWithdrawalResponse} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.rpc.BalanceWithdrawalResponse.serializeBinaryToWriter = function(message, writer) {
  message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.rpc.BalanceWithdrawalResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.rpc.BalanceWithdrawalResponse.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
  f = this.getStatus();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * Creates a deep clone of this proto. No data is shared with the original.
 * @return {!proto.rpc.BalanceWithdrawalResponse} The clone.
 */
proto.rpc.BalanceWithdrawalResponse.prototype.cloneMessage = function() {
  return /** @type {!proto.rpc.BalanceWithdrawalResponse} */ (jspb.Message.cloneMessage(this));
};


/**
 * optional string status = 1;
 * @return {string}
 */
proto.rpc.BalanceWithdrawalResponse.prototype.getStatus = function() {
  return /** @type {string} */ (jspb.Message.getFieldProto3(this, 1, ""));
};


/** @param {string} value  */
proto.rpc.BalanceWithdrawalResponse.prototype.setStatus = function(value) {
  jspb.Message.setField(this, 1, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.rpc.BalanceHistoryRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.rpc.BalanceHistoryRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.rpc.BalanceHistoryRequest.displayName = 'proto.rpc.BalanceHistoryRequest';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.rpc.BalanceHistoryRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.rpc.BalanceHistoryRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.rpc.BalanceHistoryRequest} msg The msg instance to transform.
 * @return {!Object}
 */
proto.rpc.BalanceHistoryRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    userId: msg.getUserId(),
    asset: msg.getAsset(),
    actionType: msg.getActionType(),
    startTime: msg.getStartTime(),
    endTime: msg.getEndTime(),
    offset: msg.getOffset(),
    limit: msg.getLimit()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.rpc.BalanceHistoryRequest}
 */
proto.rpc.BalanceHistoryRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.rpc.BalanceHistoryRequest;
  return proto.rpc.BalanceHistoryRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.rpc.BalanceHistoryRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.rpc.BalanceHistoryRequest}
 */
proto.rpc.BalanceHistoryRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setUserId(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setAsset(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setActionType(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setStartTime(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setEndTime(value);
      break;
    case 6:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setOffset(value);
      break;
    case 7:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setLimit(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.rpc.BalanceHistoryRequest} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.rpc.BalanceHistoryRequest.serializeBinaryToWriter = function(message, writer) {
  message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.rpc.BalanceHistoryRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.rpc.BalanceHistoryRequest.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
  f = this.getUserId();
  if (f !== 0) {
    writer.writeUint32(
      1,
      f
    );
  }
  f = this.getAsset();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = this.getActionType();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = this.getStartTime();
  if (f !== 0) {
    writer.writeUint64(
      4,
      f
    );
  }
  f = this.getEndTime();
  if (f !== 0) {
    writer.writeUint64(
      5,
      f
    );
  }
  f = this.getOffset();
  if (f !== 0) {
    writer.writeUint32(
      6,
      f
    );
  }
  f = this.getLimit();
  if (f !== 0) {
    writer.writeUint32(
      7,
      f
    );
  }
};


/**
 * Creates a deep clone of this proto. No data is shared with the original.
 * @return {!proto.rpc.BalanceHistoryRequest} The clone.
 */
proto.rpc.BalanceHistoryRequest.prototype.cloneMessage = function() {
  return /** @type {!proto.rpc.BalanceHistoryRequest} */ (jspb.Message.cloneMessage(this));
};


/**
 * optional uint32 user_id = 1;
 * @return {number}
 */
proto.rpc.BalanceHistoryRequest.prototype.getUserId = function() {
  return /** @type {number} */ (jspb.Message.getFieldProto3(this, 1, 0));
};


/** @param {number} value  */
proto.rpc.BalanceHistoryRequest.prototype.setUserId = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * optional string asset = 2;
 * @return {string}
 */
proto.rpc.BalanceHistoryRequest.prototype.getAsset = function() {
  return /** @type {string} */ (jspb.Message.getFieldProto3(this, 2, ""));
};


/** @param {string} value  */
proto.rpc.BalanceHistoryRequest.prototype.setAsset = function(value) {
  jspb.Message.setField(this, 2, value);
};


/**
 * optional string action_type = 3;
 * @return {string}
 */
proto.rpc.BalanceHistoryRequest.prototype.getActionType = function() {
  return /** @type {string} */ (jspb.Message.getFieldProto3(this, 3, ""));
};


/** @param {string} value  */
proto.rpc.BalanceHistoryRequest.prototype.setActionType = function(value) {
  jspb.Message.setField(this, 3, value);
};


/**
 * optional uint64 start_time = 4;
 * @return {number}
 */
proto.rpc.BalanceHistoryRequest.prototype.getStartTime = function() {
  return /** @type {number} */ (jspb.Message.getFieldProto3(this, 4, 0));
};


/** @param {number} value  */
proto.rpc.BalanceHistoryRequest.prototype.setStartTime = function(value) {
  jspb.Message.setField(this, 4, value);
};


/**
 * optional uint64 end_time = 5;
 * @return {number}
 */
proto.rpc.BalanceHistoryRequest.prototype.getEndTime = function() {
  return /** @type {number} */ (jspb.Message.getFieldProto3(this, 5, 0));
};


/** @param {number} value  */
proto.rpc.BalanceHistoryRequest.prototype.setEndTime = function(value) {
  jspb.Message.setField(this, 5, value);
};


/**
 * optional uint32 offset = 6;
 * @return {number}
 */
proto.rpc.BalanceHistoryRequest.prototype.getOffset = function() {
  return /** @type {number} */ (jspb.Message.getFieldProto3(this, 6, 0));
};


/** @param {number} value  */
proto.rpc.BalanceHistoryRequest.prototype.setOffset = function(value) {
  jspb.Message.setField(this, 6, value);
};


/**
 * optional uint32 limit = 7;
 * @return {number}
 */
proto.rpc.BalanceHistoryRequest.prototype.getLimit = function() {
  return /** @type {number} */ (jspb.Message.getFieldProto3(this, 7, 0));
};


/** @param {number} value  */
proto.rpc.BalanceHistoryRequest.prototype.setLimit = function(value) {
  jspb.Message.setField(this, 7, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.rpc.BalanceHistoryResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.rpc.BalanceHistoryResponse.repeatedFields_, null);
};
goog.inherits(proto.rpc.BalanceHistoryResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.rpc.BalanceHistoryResponse.displayName = 'proto.rpc.BalanceHistoryResponse';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.rpc.BalanceHistoryResponse.repeatedFields_ = [3];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.rpc.BalanceHistoryResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.rpc.BalanceHistoryResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.rpc.BalanceHistoryResponse} msg The msg instance to transform.
 * @return {!Object}
 */
proto.rpc.BalanceHistoryResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    offset: msg.getOffset(),
    limit: msg.getLimit(),
    recordsList: jspb.Message.toObjectList(msg.getRecordsList(),
    proto.rpc.BalanceHistoryResponse.Record.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.rpc.BalanceHistoryResponse}
 */
proto.rpc.BalanceHistoryResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.rpc.BalanceHistoryResponse;
  return proto.rpc.BalanceHistoryResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.rpc.BalanceHistoryResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.rpc.BalanceHistoryResponse}
 */
proto.rpc.BalanceHistoryResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setOffset(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setLimit(value);
      break;
    case 3:
      var value = new proto.rpc.BalanceHistoryResponse.Record;
      reader.readMessage(value,proto.rpc.BalanceHistoryResponse.Record.deserializeBinaryFromReader);
      msg.getRecordsList().push(value);
      msg.setRecordsList(msg.getRecordsList());
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.rpc.BalanceHistoryResponse} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.rpc.BalanceHistoryResponse.serializeBinaryToWriter = function(message, writer) {
  message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.rpc.BalanceHistoryResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.rpc.BalanceHistoryResponse.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
  f = this.getOffset();
  if (f !== 0) {
    writer.writeUint32(
      1,
      f
    );
  }
  f = this.getLimit();
  if (f !== 0) {
    writer.writeUint32(
      2,
      f
    );
  }
  f = this.getRecordsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      3,
      f,
      proto.rpc.BalanceHistoryResponse.Record.serializeBinaryToWriter
    );
  }
};


/**
 * Creates a deep clone of this proto. No data is shared with the original.
 * @return {!proto.rpc.BalanceHistoryResponse} The clone.
 */
proto.rpc.BalanceHistoryResponse.prototype.cloneMessage = function() {
  return /** @type {!proto.rpc.BalanceHistoryResponse} */ (jspb.Message.cloneMessage(this));
};


/**
 * optional uint32 offset = 1;
 * @return {number}
 */
proto.rpc.BalanceHistoryResponse.prototype.getOffset = function() {
  return /** @type {number} */ (jspb.Message.getFieldProto3(this, 1, 0));
};


/** @param {number} value  */
proto.rpc.BalanceHistoryResponse.prototype.setOffset = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * optional uint32 limit = 2;
 * @return {number}
 */
proto.rpc.BalanceHistoryResponse.prototype.getLimit = function() {
  return /** @type {number} */ (jspb.Message.getFieldProto3(this, 2, 0));
};


/** @param {number} value  */
proto.rpc.BalanceHistoryResponse.prototype.setLimit = function(value) {
  jspb.Message.setField(this, 2, value);
};


/**
 * repeated Record records = 3;
 * If you change this array by adding, removing or replacing elements, or if you
 * replace the array itself, then you must call the setter to update it.
 * @return {!Array.<!proto.rpc.BalanceHistoryResponse.Record>}
 */
proto.rpc.BalanceHistoryResponse.prototype.getRecordsList = function() {
  return /** @type{!Array.<!proto.rpc.BalanceHistoryResponse.Record>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.rpc.BalanceHistoryResponse.Record, 3));
};


/** @param {Array.<!proto.rpc.BalanceHistoryResponse.Record>} value  */
proto.rpc.BalanceHistoryResponse.prototype.setRecordsList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 3, value);
};


proto.rpc.BalanceHistoryResponse.prototype.clearRecordsList = function() {
  this.setRecordsList([]);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.rpc.BalanceHistoryResponse.Record = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.rpc.BalanceHistoryResponse.Record, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.rpc.BalanceHistoryResponse.Record.displayName = 'proto.rpc.BalanceHistoryResponse.Record';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.rpc.BalanceHistoryResponse.Record.prototype.toObject = function(opt_includeInstance) {
  return proto.rpc.BalanceHistoryResponse.Record.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.rpc.BalanceHistoryResponse.Record} msg The msg instance to transform.
 * @return {!Object}
 */
proto.rpc.BalanceHistoryResponse.Record.toObject = function(includeInstance, msg) {
  var f, obj = {
    time: msg.getTime(),
    asset: msg.getAsset(),
    actionType: msg.getActionType(),
    amount: msg.getAmount(),
    balance: msg.getBalance()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.rpc.BalanceHistoryResponse.Record}
 */
proto.rpc.BalanceHistoryResponse.Record.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.rpc.BalanceHistoryResponse.Record;
  return proto.rpc.BalanceHistoryResponse.Record.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.rpc.BalanceHistoryResponse.Record} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.rpc.BalanceHistoryResponse.Record}
 */
proto.rpc.BalanceHistoryResponse.Record.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setTime(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setAsset(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setActionType(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setAmount(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.setBalance(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.rpc.BalanceHistoryResponse.Record} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.rpc.BalanceHistoryResponse.Record.serializeBinaryToWriter = function(message, writer) {
  message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.rpc.BalanceHistoryResponse.Record.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.rpc.BalanceHistoryResponse.Record.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
  f = this.getTime();
  if (f !== 0.0) {
    writer.writeDouble(
      1,
      f
    );
  }
  f = this.getAsset();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = this.getActionType();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = this.getAmount();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
  f = this.getBalance();
  if (f.length > 0) {
    writer.writeString(
      5,
      f
    );
  }
};


/**
 * Creates a deep clone of this proto. No data is shared with the original.
 * @return {!proto.rpc.BalanceHistoryResponse.Record} The clone.
 */
proto.rpc.BalanceHistoryResponse.Record.prototype.cloneMessage = function() {
  return /** @type {!proto.rpc.BalanceHistoryResponse.Record} */ (jspb.Message.cloneMessage(this));
};


/**
 * optional double time = 1;
 * @return {number}
 */
proto.rpc.BalanceHistoryResponse.Record.prototype.getTime = function() {
  return /** @type {number} */ (jspb.Message.getFieldProto3(this, 1, 0));
};


/** @param {number} value  */
proto.rpc.BalanceHistoryResponse.Record.prototype.setTime = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * optional string asset = 2;
 * @return {string}
 */
proto.rpc.BalanceHistoryResponse.Record.prototype.getAsset = function() {
  return /** @type {string} */ (jspb.Message.getFieldProto3(this, 2, ""));
};


/** @param {string} value  */
proto.rpc.BalanceHistoryResponse.Record.prototype.setAsset = function(value) {
  jspb.Message.setField(this, 2, value);
};


/**
 * optional string action_type = 3;
 * @return {string}
 */
proto.rpc.BalanceHistoryResponse.Record.prototype.getActionType = function() {
  return /** @type {string} */ (jspb.Message.getFieldProto3(this, 3, ""));
};


/** @param {string} value  */
proto.rpc.BalanceHistoryResponse.Record.prototype.setActionType = function(value) {
  jspb.Message.setField(this, 3, value);
};


/**
 * optional string amount = 4;
 * @return {string}
 */
proto.rpc.BalanceHistoryResponse.Record.prototype.getAmount = function() {
  return /** @type {string} */ (jspb.Message.getFieldProto3(this, 4, ""));
};


/** @param {string} value  */
proto.rpc.BalanceHistoryResponse.Record.prototype.setAmount = function(value) {
  jspb.Message.setField(this, 4, value);
};


/**
 * optional string balance = 5;
 * @return {string}
 */
proto.rpc.BalanceHistoryResponse.Record.prototype.getBalance = function() {
  return /** @type {string} */ (jspb.Message.getFieldProto3(this, 5, ""));
};


/** @param {string} value  */
proto.rpc.BalanceHistoryResponse.Record.prototype.setBalance = function(value) {
  jspb.Message.setField(this, 5, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.rpc.UpdateOrder = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.rpc.UpdateOrder, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.rpc.UpdateOrder.displayName = 'proto.rpc.UpdateOrder';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.rpc.UpdateOrder.prototype.toObject = function(opt_includeInstance) {
  return proto.rpc.UpdateOrder.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.rpc.UpdateOrder} msg The msg instance to transform.
 * @return {!Object}
 */
proto.rpc.UpdateOrder.toObject = function(includeInstance, msg) {
  var f, obj = {
    event: msg.getEvent(),
    info: (f = msg.getInfo()) && proto.rpc.OrderDetailedInfo.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.rpc.UpdateOrder}
 */
proto.rpc.UpdateOrder.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.rpc.UpdateOrder;
  return proto.rpc.UpdateOrder.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.rpc.UpdateOrder} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.rpc.UpdateOrder}
 */
proto.rpc.UpdateOrder.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!proto.rpc.OrderEvent} */ (reader.readEnum());
      msg.setEvent(value);
      break;
    case 2:
      var value = new proto.rpc.OrderDetailedInfo;
      reader.readMessage(value,proto.rpc.OrderDetailedInfo.deserializeBinaryFromReader);
      msg.setInfo(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.rpc.UpdateOrder} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.rpc.UpdateOrder.serializeBinaryToWriter = function(message, writer) {
  message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.rpc.UpdateOrder.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.rpc.UpdateOrder.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
  f = this.getEvent();
  if (f !== 0.0) {
    writer.writeEnum(
      1,
      f
    );
  }
  f = this.getInfo();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.rpc.OrderDetailedInfo.serializeBinaryToWriter
    );
  }
};


/**
 * Creates a deep clone of this proto. No data is shared with the original.
 * @return {!proto.rpc.UpdateOrder} The clone.
 */
proto.rpc.UpdateOrder.prototype.cloneMessage = function() {
  return /** @type {!proto.rpc.UpdateOrder} */ (jspb.Message.cloneMessage(this));
};


/**
 * optional OrderEvent event = 1;
 * @return {!proto.rpc.OrderEvent}
 */
proto.rpc.UpdateOrder.prototype.getEvent = function() {
  return /** @type {!proto.rpc.OrderEvent} */ (jspb.Message.getFieldProto3(this, 1, 0));
};


/** @param {!proto.rpc.OrderEvent} value  */
proto.rpc.UpdateOrder.prototype.setEvent = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * optional OrderDetailedInfo info = 2;
 * @return {proto.rpc.OrderDetailedInfo}
 */
proto.rpc.UpdateOrder.prototype.getInfo = function() {
  return /** @type{proto.rpc.OrderDetailedInfo} */ (
    jspb.Message.getWrapperField(this, proto.rpc.OrderDetailedInfo, 2));
};


/** @param {proto.rpc.OrderDetailedInfo|undefined} value  */
proto.rpc.UpdateOrder.prototype.setInfo = function(value) {
  jspb.Message.setWrapperField(this, 2, value);
};


proto.rpc.UpdateOrder.prototype.clearInfo = function() {
  this.setInfo(undefined);
};


/**
 * Returns whether this field is set.
 * @return{!boolean}
 */
proto.rpc.UpdateOrder.prototype.hasInfo = function() {
  return jspb.Message.getField(this, 2) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.rpc.OrderPutLimitRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.rpc.OrderPutLimitRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.rpc.OrderPutLimitRequest.displayName = 'proto.rpc.OrderPutLimitRequest';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.rpc.OrderPutLimitRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.rpc.OrderPutLimitRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.rpc.OrderPutLimitRequest} msg The msg instance to transform.
 * @return {!Object}
 */
proto.rpc.OrderPutLimitRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    userId: msg.getUserId(),
    market: msg.getMarket(),
    side: msg.getSide(),
    amount: msg.getAmount(),
    price: msg.getPrice(),
    feeRate: msg.getFeeRate()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.rpc.OrderPutLimitRequest}
 */
proto.rpc.OrderPutLimitRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.rpc.OrderPutLimitRequest;
  return proto.rpc.OrderPutLimitRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.rpc.OrderPutLimitRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.rpc.OrderPutLimitRequest}
 */
proto.rpc.OrderPutLimitRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setUserId(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setMarket(value);
      break;
    case 3:
      var value = /** @type {!proto.rpc.MarketSide} */ (reader.readEnum());
      msg.setSide(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setAmount(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.setPrice(value);
      break;
    case 6:
      var value = /** @type {string} */ (reader.readString());
      msg.setFeeRate(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.rpc.OrderPutLimitRequest} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.rpc.OrderPutLimitRequest.serializeBinaryToWriter = function(message, writer) {
  message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.rpc.OrderPutLimitRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.rpc.OrderPutLimitRequest.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
  f = this.getUserId();
  if (f !== 0) {
    writer.writeUint32(
      1,
      f
    );
  }
  f = this.getMarket();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = this.getSide();
  if (f !== 0.0) {
    writer.writeEnum(
      3,
      f
    );
  }
  f = this.getAmount();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
  f = this.getPrice();
  if (f.length > 0) {
    writer.writeString(
      5,
      f
    );
  }
  f = this.getFeeRate();
  if (f.length > 0) {
    writer.writeString(
      6,
      f
    );
  }
};


/**
 * Creates a deep clone of this proto. No data is shared with the original.
 * @return {!proto.rpc.OrderPutLimitRequest} The clone.
 */
proto.rpc.OrderPutLimitRequest.prototype.cloneMessage = function() {
  return /** @type {!proto.rpc.OrderPutLimitRequest} */ (jspb.Message.cloneMessage(this));
};


/**
 * optional uint32 user_id = 1;
 * @return {number}
 */
proto.rpc.OrderPutLimitRequest.prototype.getUserId = function() {
  return /** @type {number} */ (jspb.Message.getFieldProto3(this, 1, 0));
};


/** @param {number} value  */
proto.rpc.OrderPutLimitRequest.prototype.setUserId = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * optional string market = 2;
 * @return {string}
 */
proto.rpc.OrderPutLimitRequest.prototype.getMarket = function() {
  return /** @type {string} */ (jspb.Message.getFieldProto3(this, 2, ""));
};


/** @param {string} value  */
proto.rpc.OrderPutLimitRequest.prototype.setMarket = function(value) {
  jspb.Message.setField(this, 2, value);
};


/**
 * optional MarketSide side = 3;
 * @return {!proto.rpc.MarketSide}
 */
proto.rpc.OrderPutLimitRequest.prototype.getSide = function() {
  return /** @type {!proto.rpc.MarketSide} */ (jspb.Message.getFieldProto3(this, 3, 0));
};


/** @param {!proto.rpc.MarketSide} value  */
proto.rpc.OrderPutLimitRequest.prototype.setSide = function(value) {
  jspb.Message.setField(this, 3, value);
};


/**
 * optional string amount = 4;
 * @return {string}
 */
proto.rpc.OrderPutLimitRequest.prototype.getAmount = function() {
  return /** @type {string} */ (jspb.Message.getFieldProto3(this, 4, ""));
};


/** @param {string} value  */
proto.rpc.OrderPutLimitRequest.prototype.setAmount = function(value) {
  jspb.Message.setField(this, 4, value);
};


/**
 * optional string price = 5;
 * @return {string}
 */
proto.rpc.OrderPutLimitRequest.prototype.getPrice = function() {
  return /** @type {string} */ (jspb.Message.getFieldProto3(this, 5, ""));
};


/** @param {string} value  */
proto.rpc.OrderPutLimitRequest.prototype.setPrice = function(value) {
  jspb.Message.setField(this, 5, value);
};


/**
 * optional string fee_rate = 6;
 * @return {string}
 */
proto.rpc.OrderPutLimitRequest.prototype.getFeeRate = function() {
  return /** @type {string} */ (jspb.Message.getFieldProto3(this, 6, ""));
};


/** @param {string} value  */
proto.rpc.OrderPutLimitRequest.prototype.setFeeRate = function(value) {
  jspb.Message.setField(this, 6, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.rpc.OrderPutMarketRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.rpc.OrderPutMarketRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.rpc.OrderPutMarketRequest.displayName = 'proto.rpc.OrderPutMarketRequest';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.rpc.OrderPutMarketRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.rpc.OrderPutMarketRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.rpc.OrderPutMarketRequest} msg The msg instance to transform.
 * @return {!Object}
 */
proto.rpc.OrderPutMarketRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    userId: msg.getUserId(),
    market: msg.getMarket(),
    side: msg.getSide(),
    amount: msg.getAmount(),
    feeRate: msg.getFeeRate()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.rpc.OrderPutMarketRequest}
 */
proto.rpc.OrderPutMarketRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.rpc.OrderPutMarketRequest;
  return proto.rpc.OrderPutMarketRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.rpc.OrderPutMarketRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.rpc.OrderPutMarketRequest}
 */
proto.rpc.OrderPutMarketRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setUserId(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setMarket(value);
      break;
    case 3:
      var value = /** @type {!proto.rpc.MarketSide} */ (reader.readEnum());
      msg.setSide(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setAmount(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.setFeeRate(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.rpc.OrderPutMarketRequest} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.rpc.OrderPutMarketRequest.serializeBinaryToWriter = function(message, writer) {
  message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.rpc.OrderPutMarketRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.rpc.OrderPutMarketRequest.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
  f = this.getUserId();
  if (f !== 0) {
    writer.writeUint32(
      1,
      f
    );
  }
  f = this.getMarket();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = this.getSide();
  if (f !== 0.0) {
    writer.writeEnum(
      3,
      f
    );
  }
  f = this.getAmount();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
  f = this.getFeeRate();
  if (f.length > 0) {
    writer.writeString(
      5,
      f
    );
  }
};


/**
 * Creates a deep clone of this proto. No data is shared with the original.
 * @return {!proto.rpc.OrderPutMarketRequest} The clone.
 */
proto.rpc.OrderPutMarketRequest.prototype.cloneMessage = function() {
  return /** @type {!proto.rpc.OrderPutMarketRequest} */ (jspb.Message.cloneMessage(this));
};


/**
 * optional uint32 user_id = 1;
 * @return {number}
 */
proto.rpc.OrderPutMarketRequest.prototype.getUserId = function() {
  return /** @type {number} */ (jspb.Message.getFieldProto3(this, 1, 0));
};


/** @param {number} value  */
proto.rpc.OrderPutMarketRequest.prototype.setUserId = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * optional string market = 2;
 * @return {string}
 */
proto.rpc.OrderPutMarketRequest.prototype.getMarket = function() {
  return /** @type {string} */ (jspb.Message.getFieldProto3(this, 2, ""));
};


/** @param {string} value  */
proto.rpc.OrderPutMarketRequest.prototype.setMarket = function(value) {
  jspb.Message.setField(this, 2, value);
};


/**
 * optional MarketSide side = 3;
 * @return {!proto.rpc.MarketSide}
 */
proto.rpc.OrderPutMarketRequest.prototype.getSide = function() {
  return /** @type {!proto.rpc.MarketSide} */ (jspb.Message.getFieldProto3(this, 3, 0));
};


/** @param {!proto.rpc.MarketSide} value  */
proto.rpc.OrderPutMarketRequest.prototype.setSide = function(value) {
  jspb.Message.setField(this, 3, value);
};


/**
 * optional string amount = 4;
 * @return {string}
 */
proto.rpc.OrderPutMarketRequest.prototype.getAmount = function() {
  return /** @type {string} */ (jspb.Message.getFieldProto3(this, 4, ""));
};


/** @param {string} value  */
proto.rpc.OrderPutMarketRequest.prototype.setAmount = function(value) {
  jspb.Message.setField(this, 4, value);
};


/**
 * optional string fee_rate = 5;
 * @return {string}
 */
proto.rpc.OrderPutMarketRequest.prototype.getFeeRate = function() {
  return /** @type {string} */ (jspb.Message.getFieldProto3(this, 5, ""));
};


/** @param {string} value  */
proto.rpc.OrderPutMarketRequest.prototype.setFeeRate = function(value) {
  jspb.Message.setField(this, 5, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.rpc.OrderCancelRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.rpc.OrderCancelRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.rpc.OrderCancelRequest.displayName = 'proto.rpc.OrderCancelRequest';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.rpc.OrderCancelRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.rpc.OrderCancelRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.rpc.OrderCancelRequest} msg The msg instance to transform.
 * @return {!Object}
 */
proto.rpc.OrderCancelRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    userId: msg.getUserId(),
    market: msg.getMarket(),
    orderId: msg.getOrderId()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.rpc.OrderCancelRequest}
 */
proto.rpc.OrderCancelRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.rpc.OrderCancelRequest;
  return proto.rpc.OrderCancelRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.rpc.OrderCancelRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.rpc.OrderCancelRequest}
 */
proto.rpc.OrderCancelRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setUserId(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setMarket(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setOrderId(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.rpc.OrderCancelRequest} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.rpc.OrderCancelRequest.serializeBinaryToWriter = function(message, writer) {
  message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.rpc.OrderCancelRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.rpc.OrderCancelRequest.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
  f = this.getUserId();
  if (f !== 0) {
    writer.writeUint32(
      1,
      f
    );
  }
  f = this.getMarket();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = this.getOrderId();
  if (f !== 0) {
    writer.writeUint32(
      3,
      f
    );
  }
};


/**
 * Creates a deep clone of this proto. No data is shared with the original.
 * @return {!proto.rpc.OrderCancelRequest} The clone.
 */
proto.rpc.OrderCancelRequest.prototype.cloneMessage = function() {
  return /** @type {!proto.rpc.OrderCancelRequest} */ (jspb.Message.cloneMessage(this));
};


/**
 * optional uint32 user_id = 1;
 * @return {number}
 */
proto.rpc.OrderCancelRequest.prototype.getUserId = function() {
  return /** @type {number} */ (jspb.Message.getFieldProto3(this, 1, 0));
};


/** @param {number} value  */
proto.rpc.OrderCancelRequest.prototype.setUserId = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * optional string market = 2;
 * @return {string}
 */
proto.rpc.OrderCancelRequest.prototype.getMarket = function() {
  return /** @type {string} */ (jspb.Message.getFieldProto3(this, 2, ""));
};


/** @param {string} value  */
proto.rpc.OrderCancelRequest.prototype.setMarket = function(value) {
  jspb.Message.setField(this, 2, value);
};


/**
 * optional uint32 order_id = 3;
 * @return {number}
 */
proto.rpc.OrderCancelRequest.prototype.getOrderId = function() {
  return /** @type {number} */ (jspb.Message.getFieldProto3(this, 3, 0));
};


/** @param {number} value  */
proto.rpc.OrderCancelRequest.prototype.setOrderId = function(value) {
  jspb.Message.setField(this, 3, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.rpc.OrderDealsRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.rpc.OrderDealsRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.rpc.OrderDealsRequest.displayName = 'proto.rpc.OrderDealsRequest';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.rpc.OrderDealsRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.rpc.OrderDealsRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.rpc.OrderDealsRequest} msg The msg instance to transform.
 * @return {!Object}
 */
proto.rpc.OrderDealsRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    orderId: msg.getOrderId(),
    offset: msg.getOffset(),
    limit: msg.getLimit()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.rpc.OrderDealsRequest}
 */
proto.rpc.OrderDealsRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.rpc.OrderDealsRequest;
  return proto.rpc.OrderDealsRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.rpc.OrderDealsRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.rpc.OrderDealsRequest}
 */
proto.rpc.OrderDealsRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setOrderId(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setOffset(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setLimit(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.rpc.OrderDealsRequest} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.rpc.OrderDealsRequest.serializeBinaryToWriter = function(message, writer) {
  message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.rpc.OrderDealsRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.rpc.OrderDealsRequest.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
  f = this.getOrderId();
  if (f !== 0) {
    writer.writeUint32(
      1,
      f
    );
  }
  f = this.getOffset();
  if (f !== 0) {
    writer.writeUint32(
      2,
      f
    );
  }
  f = this.getLimit();
  if (f !== 0) {
    writer.writeUint32(
      3,
      f
    );
  }
};


/**
 * Creates a deep clone of this proto. No data is shared with the original.
 * @return {!proto.rpc.OrderDealsRequest} The clone.
 */
proto.rpc.OrderDealsRequest.prototype.cloneMessage = function() {
  return /** @type {!proto.rpc.OrderDealsRequest} */ (jspb.Message.cloneMessage(this));
};


/**
 * optional uint32 order_id = 1;
 * @return {number}
 */
proto.rpc.OrderDealsRequest.prototype.getOrderId = function() {
  return /** @type {number} */ (jspb.Message.getFieldProto3(this, 1, 0));
};


/** @param {number} value  */
proto.rpc.OrderDealsRequest.prototype.setOrderId = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * optional uint32 offset = 2;
 * @return {number}
 */
proto.rpc.OrderDealsRequest.prototype.getOffset = function() {
  return /** @type {number} */ (jspb.Message.getFieldProto3(this, 2, 0));
};


/** @param {number} value  */
proto.rpc.OrderDealsRequest.prototype.setOffset = function(value) {
  jspb.Message.setField(this, 2, value);
};


/**
 * optional uint32 limit = 3;
 * @return {number}
 */
proto.rpc.OrderDealsRequest.prototype.getLimit = function() {
  return /** @type {number} */ (jspb.Message.getFieldProto3(this, 3, 0));
};


/** @param {number} value  */
proto.rpc.OrderDealsRequest.prototype.setLimit = function(value) {
  jspb.Message.setField(this, 3, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.rpc.OrderDealsResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.rpc.OrderDealsResponse.repeatedFields_, null);
};
goog.inherits(proto.rpc.OrderDealsResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.rpc.OrderDealsResponse.displayName = 'proto.rpc.OrderDealsResponse';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.rpc.OrderDealsResponse.repeatedFields_ = [3];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.rpc.OrderDealsResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.rpc.OrderDealsResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.rpc.OrderDealsResponse} msg The msg instance to transform.
 * @return {!Object}
 */
proto.rpc.OrderDealsResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    offset: msg.getOffset(),
    limit: msg.getLimit(),
    dealsList: jspb.Message.toObjectList(msg.getDealsList(),
    proto.rpc.DealDetail.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.rpc.OrderDealsResponse}
 */
proto.rpc.OrderDealsResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.rpc.OrderDealsResponse;
  return proto.rpc.OrderDealsResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.rpc.OrderDealsResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.rpc.OrderDealsResponse}
 */
proto.rpc.OrderDealsResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setOffset(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setLimit(value);
      break;
    case 3:
      var value = new proto.rpc.DealDetail;
      reader.readMessage(value,proto.rpc.DealDetail.deserializeBinaryFromReader);
      msg.getDealsList().push(value);
      msg.setDealsList(msg.getDealsList());
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.rpc.OrderDealsResponse} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.rpc.OrderDealsResponse.serializeBinaryToWriter = function(message, writer) {
  message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.rpc.OrderDealsResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.rpc.OrderDealsResponse.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
  f = this.getOffset();
  if (f !== 0) {
    writer.writeUint32(
      1,
      f
    );
  }
  f = this.getLimit();
  if (f !== 0) {
    writer.writeUint32(
      2,
      f
    );
  }
  f = this.getDealsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      3,
      f,
      proto.rpc.DealDetail.serializeBinaryToWriter
    );
  }
};


/**
 * Creates a deep clone of this proto. No data is shared with the original.
 * @return {!proto.rpc.OrderDealsResponse} The clone.
 */
proto.rpc.OrderDealsResponse.prototype.cloneMessage = function() {
  return /** @type {!proto.rpc.OrderDealsResponse} */ (jspb.Message.cloneMessage(this));
};


/**
 * optional uint32 offset = 1;
 * @return {number}
 */
proto.rpc.OrderDealsResponse.prototype.getOffset = function() {
  return /** @type {number} */ (jspb.Message.getFieldProto3(this, 1, 0));
};


/** @param {number} value  */
proto.rpc.OrderDealsResponse.prototype.setOffset = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * optional uint32 limit = 2;
 * @return {number}
 */
proto.rpc.OrderDealsResponse.prototype.getLimit = function() {
  return /** @type {number} */ (jspb.Message.getFieldProto3(this, 2, 0));
};


/** @param {number} value  */
proto.rpc.OrderDealsResponse.prototype.setLimit = function(value) {
  jspb.Message.setField(this, 2, value);
};


/**
 * repeated DealDetail deals = 3;
 * If you change this array by adding, removing or replacing elements, or if you
 * replace the array itself, then you must call the setter to update it.
 * @return {!Array.<!proto.rpc.DealDetail>}
 */
proto.rpc.OrderDealsResponse.prototype.getDealsList = function() {
  return /** @type{!Array.<!proto.rpc.DealDetail>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.rpc.DealDetail, 3));
};


/** @param {Array.<!proto.rpc.DealDetail>} value  */
proto.rpc.OrderDealsResponse.prototype.setDealsList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 3, value);
};


proto.rpc.OrderDealsResponse.prototype.clearDealsList = function() {
  this.setDealsList([]);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.rpc.OrderBookRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.rpc.OrderBookRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.rpc.OrderBookRequest.displayName = 'proto.rpc.OrderBookRequest';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.rpc.OrderBookRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.rpc.OrderBookRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.rpc.OrderBookRequest} msg The msg instance to transform.
 * @return {!Object}
 */
proto.rpc.OrderBookRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    market: msg.getMarket(),
    side: msg.getSide(),
    offset: msg.getOffset(),
    limit: msg.getLimit()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.rpc.OrderBookRequest}
 */
proto.rpc.OrderBookRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.rpc.OrderBookRequest;
  return proto.rpc.OrderBookRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.rpc.OrderBookRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.rpc.OrderBookRequest}
 */
proto.rpc.OrderBookRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setMarket(value);
      break;
    case 2:
      var value = /** @type {!proto.rpc.MarketSide} */ (reader.readEnum());
      msg.setSide(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setOffset(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setLimit(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.rpc.OrderBookRequest} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.rpc.OrderBookRequest.serializeBinaryToWriter = function(message, writer) {
  message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.rpc.OrderBookRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.rpc.OrderBookRequest.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
  f = this.getMarket();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = this.getSide();
  if (f !== 0.0) {
    writer.writeEnum(
      2,
      f
    );
  }
  f = this.getOffset();
  if (f !== 0) {
    writer.writeUint32(
      3,
      f
    );
  }
  f = this.getLimit();
  if (f !== 0) {
    writer.writeUint32(
      4,
      f
    );
  }
};


/**
 * Creates a deep clone of this proto. No data is shared with the original.
 * @return {!proto.rpc.OrderBookRequest} The clone.
 */
proto.rpc.OrderBookRequest.prototype.cloneMessage = function() {
  return /** @type {!proto.rpc.OrderBookRequest} */ (jspb.Message.cloneMessage(this));
};


/**
 * optional string market = 1;
 * @return {string}
 */
proto.rpc.OrderBookRequest.prototype.getMarket = function() {
  return /** @type {string} */ (jspb.Message.getFieldProto3(this, 1, ""));
};


/** @param {string} value  */
proto.rpc.OrderBookRequest.prototype.setMarket = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * optional MarketSide side = 2;
 * @return {!proto.rpc.MarketSide}
 */
proto.rpc.OrderBookRequest.prototype.getSide = function() {
  return /** @type {!proto.rpc.MarketSide} */ (jspb.Message.getFieldProto3(this, 2, 0));
};


/** @param {!proto.rpc.MarketSide} value  */
proto.rpc.OrderBookRequest.prototype.setSide = function(value) {
  jspb.Message.setField(this, 2, value);
};


/**
 * optional uint32 offset = 3;
 * @return {number}
 */
proto.rpc.OrderBookRequest.prototype.getOffset = function() {
  return /** @type {number} */ (jspb.Message.getFieldProto3(this, 3, 0));
};


/** @param {number} value  */
proto.rpc.OrderBookRequest.prototype.setOffset = function(value) {
  jspb.Message.setField(this, 3, value);
};


/**
 * optional uint32 limit = 4;
 * @return {number}
 */
proto.rpc.OrderBookRequest.prototype.getLimit = function() {
  return /** @type {number} */ (jspb.Message.getFieldProto3(this, 4, 0));
};


/** @param {number} value  */
proto.rpc.OrderBookRequest.prototype.setLimit = function(value) {
  jspb.Message.setField(this, 4, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.rpc.OrderBookResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.rpc.OrderBookResponse.repeatedFields_, null);
};
goog.inherits(proto.rpc.OrderBookResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.rpc.OrderBookResponse.displayName = 'proto.rpc.OrderBookResponse';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.rpc.OrderBookResponse.repeatedFields_ = [4];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.rpc.OrderBookResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.rpc.OrderBookResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.rpc.OrderBookResponse} msg The msg instance to transform.
 * @return {!Object}
 */
proto.rpc.OrderBookResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    offset: msg.getOffset(),
    limit: msg.getLimit(),
    total: msg.getTotal(),
    ordersList: jspb.Message.toObjectList(msg.getOrdersList(),
    proto.rpc.OrderDetailedInfo.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.rpc.OrderBookResponse}
 */
proto.rpc.OrderBookResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.rpc.OrderBookResponse;
  return proto.rpc.OrderBookResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.rpc.OrderBookResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.rpc.OrderBookResponse}
 */
proto.rpc.OrderBookResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setOffset(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setLimit(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setTotal(value);
      break;
    case 4:
      var value = new proto.rpc.OrderDetailedInfo;
      reader.readMessage(value,proto.rpc.OrderDetailedInfo.deserializeBinaryFromReader);
      msg.getOrdersList().push(value);
      msg.setOrdersList(msg.getOrdersList());
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.rpc.OrderBookResponse} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.rpc.OrderBookResponse.serializeBinaryToWriter = function(message, writer) {
  message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.rpc.OrderBookResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.rpc.OrderBookResponse.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
  f = this.getOffset();
  if (f !== 0) {
    writer.writeUint32(
      1,
      f
    );
  }
  f = this.getLimit();
  if (f !== 0) {
    writer.writeUint32(
      2,
      f
    );
  }
  f = this.getTotal();
  if (f !== 0) {
    writer.writeUint64(
      3,
      f
    );
  }
  f = this.getOrdersList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      4,
      f,
      proto.rpc.OrderDetailedInfo.serializeBinaryToWriter
    );
  }
};


/**
 * Creates a deep clone of this proto. No data is shared with the original.
 * @return {!proto.rpc.OrderBookResponse} The clone.
 */
proto.rpc.OrderBookResponse.prototype.cloneMessage = function() {
  return /** @type {!proto.rpc.OrderBookResponse} */ (jspb.Message.cloneMessage(this));
};


/**
 * optional uint32 offset = 1;
 * @return {number}
 */
proto.rpc.OrderBookResponse.prototype.getOffset = function() {
  return /** @type {number} */ (jspb.Message.getFieldProto3(this, 1, 0));
};


/** @param {number} value  */
proto.rpc.OrderBookResponse.prototype.setOffset = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * optional uint32 limit = 2;
 * @return {number}
 */
proto.rpc.OrderBookResponse.prototype.getLimit = function() {
  return /** @type {number} */ (jspb.Message.getFieldProto3(this, 2, 0));
};


/** @param {number} value  */
proto.rpc.OrderBookResponse.prototype.setLimit = function(value) {
  jspb.Message.setField(this, 2, value);
};


/**
 * optional uint64 total = 3;
 * @return {number}
 */
proto.rpc.OrderBookResponse.prototype.getTotal = function() {
  return /** @type {number} */ (jspb.Message.getFieldProto3(this, 3, 0));
};


/** @param {number} value  */
proto.rpc.OrderBookResponse.prototype.setTotal = function(value) {
  jspb.Message.setField(this, 3, value);
};


/**
 * repeated OrderDetailedInfo orders = 4;
 * If you change this array by adding, removing or replacing elements, or if you
 * replace the array itself, then you must call the setter to update it.
 * @return {!Array.<!proto.rpc.OrderDetailedInfo>}
 */
proto.rpc.OrderBookResponse.prototype.getOrdersList = function() {
  return /** @type{!Array.<!proto.rpc.OrderDetailedInfo>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.rpc.OrderDetailedInfo, 4));
};


/** @param {Array.<!proto.rpc.OrderDetailedInfo>} value  */
proto.rpc.OrderBookResponse.prototype.setOrdersList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 4, value);
};


proto.rpc.OrderBookResponse.prototype.clearOrdersList = function() {
  this.setOrdersList([]);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.rpc.OrderDepthRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.rpc.OrderDepthRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.rpc.OrderDepthRequest.displayName = 'proto.rpc.OrderDepthRequest';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.rpc.OrderDepthRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.rpc.OrderDepthRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.rpc.OrderDepthRequest} msg The msg instance to transform.
 * @return {!Object}
 */
proto.rpc.OrderDepthRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    market: msg.getMarket(),
    limit: msg.getLimit(),
    interval: msg.getInterval()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.rpc.OrderDepthRequest}
 */
proto.rpc.OrderDepthRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.rpc.OrderDepthRequest;
  return proto.rpc.OrderDepthRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.rpc.OrderDepthRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.rpc.OrderDepthRequest}
 */
proto.rpc.OrderDepthRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setMarket(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setLimit(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setInterval(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.rpc.OrderDepthRequest} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.rpc.OrderDepthRequest.serializeBinaryToWriter = function(message, writer) {
  message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.rpc.OrderDepthRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.rpc.OrderDepthRequest.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
  f = this.getMarket();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = this.getLimit();
  if (f !== 0) {
    writer.writeUint32(
      2,
      f
    );
  }
  f = this.getInterval();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
};


/**
 * Creates a deep clone of this proto. No data is shared with the original.
 * @return {!proto.rpc.OrderDepthRequest} The clone.
 */
proto.rpc.OrderDepthRequest.prototype.cloneMessage = function() {
  return /** @type {!proto.rpc.OrderDepthRequest} */ (jspb.Message.cloneMessage(this));
};


/**
 * optional string market = 1;
 * @return {string}
 */
proto.rpc.OrderDepthRequest.prototype.getMarket = function() {
  return /** @type {string} */ (jspb.Message.getFieldProto3(this, 1, ""));
};


/** @param {string} value  */
proto.rpc.OrderDepthRequest.prototype.setMarket = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * optional uint32 limit = 2;
 * @return {number}
 */
proto.rpc.OrderDepthRequest.prototype.getLimit = function() {
  return /** @type {number} */ (jspb.Message.getFieldProto3(this, 2, 0));
};


/** @param {number} value  */
proto.rpc.OrderDepthRequest.prototype.setLimit = function(value) {
  jspb.Message.setField(this, 2, value);
};


/**
 * optional string interval = 3;
 * @return {string}
 */
proto.rpc.OrderDepthRequest.prototype.getInterval = function() {
  return /** @type {string} */ (jspb.Message.getFieldProto3(this, 3, ""));
};


/** @param {string} value  */
proto.rpc.OrderDepthRequest.prototype.setInterval = function(value) {
  jspb.Message.setField(this, 3, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.rpc.OrderDepthResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.rpc.OrderDepthResponse.repeatedFields_, null);
};
goog.inherits(proto.rpc.OrderDepthResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.rpc.OrderDepthResponse.displayName = 'proto.rpc.OrderDepthResponse';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.rpc.OrderDepthResponse.repeatedFields_ = [1,2];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.rpc.OrderDepthResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.rpc.OrderDepthResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.rpc.OrderDepthResponse} msg The msg instance to transform.
 * @return {!Object}
 */
proto.rpc.OrderDepthResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    asksList: jspb.Message.toObjectList(msg.getAsksList(),
    proto.rpc.OrderDepthResponse.Depth.toObject, includeInstance),
    bidsList: jspb.Message.toObjectList(msg.getBidsList(),
    proto.rpc.OrderDepthResponse.Depth.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.rpc.OrderDepthResponse}
 */
proto.rpc.OrderDepthResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.rpc.OrderDepthResponse;
  return proto.rpc.OrderDepthResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.rpc.OrderDepthResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.rpc.OrderDepthResponse}
 */
proto.rpc.OrderDepthResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.rpc.OrderDepthResponse.Depth;
      reader.readMessage(value,proto.rpc.OrderDepthResponse.Depth.deserializeBinaryFromReader);
      msg.getAsksList().push(value);
      msg.setAsksList(msg.getAsksList());
      break;
    case 2:
      var value = new proto.rpc.OrderDepthResponse.Depth;
      reader.readMessage(value,proto.rpc.OrderDepthResponse.Depth.deserializeBinaryFromReader);
      msg.getBidsList().push(value);
      msg.setBidsList(msg.getBidsList());
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.rpc.OrderDepthResponse} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.rpc.OrderDepthResponse.serializeBinaryToWriter = function(message, writer) {
  message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.rpc.OrderDepthResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.rpc.OrderDepthResponse.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
  f = this.getAsksList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.rpc.OrderDepthResponse.Depth.serializeBinaryToWriter
    );
  }
  f = this.getBidsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      2,
      f,
      proto.rpc.OrderDepthResponse.Depth.serializeBinaryToWriter
    );
  }
};


/**
 * Creates a deep clone of this proto. No data is shared with the original.
 * @return {!proto.rpc.OrderDepthResponse} The clone.
 */
proto.rpc.OrderDepthResponse.prototype.cloneMessage = function() {
  return /** @type {!proto.rpc.OrderDepthResponse} */ (jspb.Message.cloneMessage(this));
};


/**
 * repeated Depth asks = 1;
 * If you change this array by adding, removing or replacing elements, or if you
 * replace the array itself, then you must call the setter to update it.
 * @return {!Array.<!proto.rpc.OrderDepthResponse.Depth>}
 */
proto.rpc.OrderDepthResponse.prototype.getAsksList = function() {
  return /** @type{!Array.<!proto.rpc.OrderDepthResponse.Depth>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.rpc.OrderDepthResponse.Depth, 1));
};


/** @param {Array.<!proto.rpc.OrderDepthResponse.Depth>} value  */
proto.rpc.OrderDepthResponse.prototype.setAsksList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 1, value);
};


proto.rpc.OrderDepthResponse.prototype.clearAsksList = function() {
  this.setAsksList([]);
};


/**
 * repeated Depth bids = 2;
 * If you change this array by adding, removing or replacing elements, or if you
 * replace the array itself, then you must call the setter to update it.
 * @return {!Array.<!proto.rpc.OrderDepthResponse.Depth>}
 */
proto.rpc.OrderDepthResponse.prototype.getBidsList = function() {
  return /** @type{!Array.<!proto.rpc.OrderDepthResponse.Depth>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.rpc.OrderDepthResponse.Depth, 2));
};


/** @param {Array.<!proto.rpc.OrderDepthResponse.Depth>} value  */
proto.rpc.OrderDepthResponse.prototype.setBidsList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 2, value);
};


proto.rpc.OrderDepthResponse.prototype.clearBidsList = function() {
  this.setBidsList([]);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.rpc.OrderDepthResponse.Depth = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.rpc.OrderDepthResponse.Depth, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.rpc.OrderDepthResponse.Depth.displayName = 'proto.rpc.OrderDepthResponse.Depth';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.rpc.OrderDepthResponse.Depth.prototype.toObject = function(opt_includeInstance) {
  return proto.rpc.OrderDepthResponse.Depth.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.rpc.OrderDepthResponse.Depth} msg The msg instance to transform.
 * @return {!Object}
 */
proto.rpc.OrderDepthResponse.Depth.toObject = function(includeInstance, msg) {
  var f, obj = {
    volume: msg.getVolume(),
    price: msg.getPrice()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.rpc.OrderDepthResponse.Depth}
 */
proto.rpc.OrderDepthResponse.Depth.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.rpc.OrderDepthResponse.Depth;
  return proto.rpc.OrderDepthResponse.Depth.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.rpc.OrderDepthResponse.Depth} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.rpc.OrderDepthResponse.Depth}
 */
proto.rpc.OrderDepthResponse.Depth.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setVolume(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setPrice(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.rpc.OrderDepthResponse.Depth} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.rpc.OrderDepthResponse.Depth.serializeBinaryToWriter = function(message, writer) {
  message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.rpc.OrderDepthResponse.Depth.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.rpc.OrderDepthResponse.Depth.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
  f = this.getVolume();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = this.getPrice();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * Creates a deep clone of this proto. No data is shared with the original.
 * @return {!proto.rpc.OrderDepthResponse.Depth} The clone.
 */
proto.rpc.OrderDepthResponse.Depth.prototype.cloneMessage = function() {
  return /** @type {!proto.rpc.OrderDepthResponse.Depth} */ (jspb.Message.cloneMessage(this));
};


/**
 * optional string volume = 1;
 * @return {string}
 */
proto.rpc.OrderDepthResponse.Depth.prototype.getVolume = function() {
  return /** @type {string} */ (jspb.Message.getFieldProto3(this, 1, ""));
};


/** @param {string} value  */
proto.rpc.OrderDepthResponse.Depth.prototype.setVolume = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * optional string price = 2;
 * @return {string}
 */
proto.rpc.OrderDepthResponse.Depth.prototype.getPrice = function() {
  return /** @type {string} */ (jspb.Message.getFieldProto3(this, 2, ""));
};


/** @param {string} value  */
proto.rpc.OrderDepthResponse.Depth.prototype.setPrice = function(value) {
  jspb.Message.setField(this, 2, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.rpc.OrderPendingRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.rpc.OrderPendingRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.rpc.OrderPendingRequest.displayName = 'proto.rpc.OrderPendingRequest';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.rpc.OrderPendingRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.rpc.OrderPendingRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.rpc.OrderPendingRequest} msg The msg instance to transform.
 * @return {!Object}
 */
proto.rpc.OrderPendingRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    userId: msg.getUserId(),
    market: msg.getMarket(),
    offset: msg.getOffset(),
    limit: msg.getLimit()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.rpc.OrderPendingRequest}
 */
proto.rpc.OrderPendingRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.rpc.OrderPendingRequest;
  return proto.rpc.OrderPendingRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.rpc.OrderPendingRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.rpc.OrderPendingRequest}
 */
proto.rpc.OrderPendingRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setUserId(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setMarket(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setOffset(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setLimit(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.rpc.OrderPendingRequest} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.rpc.OrderPendingRequest.serializeBinaryToWriter = function(message, writer) {
  message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.rpc.OrderPendingRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.rpc.OrderPendingRequest.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
  f = this.getUserId();
  if (f !== 0) {
    writer.writeUint32(
      1,
      f
    );
  }
  f = this.getMarket();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = this.getOffset();
  if (f !== 0) {
    writer.writeUint32(
      3,
      f
    );
  }
  f = this.getLimit();
  if (f !== 0) {
    writer.writeUint32(
      4,
      f
    );
  }
};


/**
 * Creates a deep clone of this proto. No data is shared with the original.
 * @return {!proto.rpc.OrderPendingRequest} The clone.
 */
proto.rpc.OrderPendingRequest.prototype.cloneMessage = function() {
  return /** @type {!proto.rpc.OrderPendingRequest} */ (jspb.Message.cloneMessage(this));
};


/**
 * optional uint32 user_id = 1;
 * @return {number}
 */
proto.rpc.OrderPendingRequest.prototype.getUserId = function() {
  return /** @type {number} */ (jspb.Message.getFieldProto3(this, 1, 0));
};


/** @param {number} value  */
proto.rpc.OrderPendingRequest.prototype.setUserId = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * optional string market = 2;
 * @return {string}
 */
proto.rpc.OrderPendingRequest.prototype.getMarket = function() {
  return /** @type {string} */ (jspb.Message.getFieldProto3(this, 2, ""));
};


/** @param {string} value  */
proto.rpc.OrderPendingRequest.prototype.setMarket = function(value) {
  jspb.Message.setField(this, 2, value);
};


/**
 * optional uint32 offset = 3;
 * @return {number}
 */
proto.rpc.OrderPendingRequest.prototype.getOffset = function() {
  return /** @type {number} */ (jspb.Message.getFieldProto3(this, 3, 0));
};


/** @param {number} value  */
proto.rpc.OrderPendingRequest.prototype.setOffset = function(value) {
  jspb.Message.setField(this, 3, value);
};


/**
 * optional uint32 limit = 4;
 * @return {number}
 */
proto.rpc.OrderPendingRequest.prototype.getLimit = function() {
  return /** @type {number} */ (jspb.Message.getFieldProto3(this, 4, 0));
};


/** @param {number} value  */
proto.rpc.OrderPendingRequest.prototype.setLimit = function(value) {
  jspb.Message.setField(this, 4, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.rpc.OrderPendingResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.rpc.OrderPendingResponse.repeatedFields_, null);
};
goog.inherits(proto.rpc.OrderPendingResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.rpc.OrderPendingResponse.displayName = 'proto.rpc.OrderPendingResponse';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.rpc.OrderPendingResponse.repeatedFields_ = [4];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.rpc.OrderPendingResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.rpc.OrderPendingResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.rpc.OrderPendingResponse} msg The msg instance to transform.
 * @return {!Object}
 */
proto.rpc.OrderPendingResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    offset: msg.getOffset(),
    limit: msg.getLimit(),
    total: msg.getTotal(),
    ordersList: jspb.Message.toObjectList(msg.getOrdersList(),
    proto.rpc.OrderDetailedInfo.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.rpc.OrderPendingResponse}
 */
proto.rpc.OrderPendingResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.rpc.OrderPendingResponse;
  return proto.rpc.OrderPendingResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.rpc.OrderPendingResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.rpc.OrderPendingResponse}
 */
proto.rpc.OrderPendingResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setOffset(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setLimit(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setTotal(value);
      break;
    case 4:
      var value = new proto.rpc.OrderDetailedInfo;
      reader.readMessage(value,proto.rpc.OrderDetailedInfo.deserializeBinaryFromReader);
      msg.getOrdersList().push(value);
      msg.setOrdersList(msg.getOrdersList());
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.rpc.OrderPendingResponse} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.rpc.OrderPendingResponse.serializeBinaryToWriter = function(message, writer) {
  message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.rpc.OrderPendingResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.rpc.OrderPendingResponse.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
  f = this.getOffset();
  if (f !== 0) {
    writer.writeUint32(
      1,
      f
    );
  }
  f = this.getLimit();
  if (f !== 0) {
    writer.writeUint32(
      2,
      f
    );
  }
  f = this.getTotal();
  if (f !== 0) {
    writer.writeUint64(
      3,
      f
    );
  }
  f = this.getOrdersList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      4,
      f,
      proto.rpc.OrderDetailedInfo.serializeBinaryToWriter
    );
  }
};


/**
 * Creates a deep clone of this proto. No data is shared with the original.
 * @return {!proto.rpc.OrderPendingResponse} The clone.
 */
proto.rpc.OrderPendingResponse.prototype.cloneMessage = function() {
  return /** @type {!proto.rpc.OrderPendingResponse} */ (jspb.Message.cloneMessage(this));
};


/**
 * optional uint32 offset = 1;
 * @return {number}
 */
proto.rpc.OrderPendingResponse.prototype.getOffset = function() {
  return /** @type {number} */ (jspb.Message.getFieldProto3(this, 1, 0));
};


/** @param {number} value  */
proto.rpc.OrderPendingResponse.prototype.setOffset = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * optional uint32 limit = 2;
 * @return {number}
 */
proto.rpc.OrderPendingResponse.prototype.getLimit = function() {
  return /** @type {number} */ (jspb.Message.getFieldProto3(this, 2, 0));
};


/** @param {number} value  */
proto.rpc.OrderPendingResponse.prototype.setLimit = function(value) {
  jspb.Message.setField(this, 2, value);
};


/**
 * optional uint64 total = 3;
 * @return {number}
 */
proto.rpc.OrderPendingResponse.prototype.getTotal = function() {
  return /** @type {number} */ (jspb.Message.getFieldProto3(this, 3, 0));
};


/** @param {number} value  */
proto.rpc.OrderPendingResponse.prototype.setTotal = function(value) {
  jspb.Message.setField(this, 3, value);
};


/**
 * repeated OrderDetailedInfo orders = 4;
 * If you change this array by adding, removing or replacing elements, or if you
 * replace the array itself, then you must call the setter to update it.
 * @return {!Array.<!proto.rpc.OrderDetailedInfo>}
 */
proto.rpc.OrderPendingResponse.prototype.getOrdersList = function() {
  return /** @type{!Array.<!proto.rpc.OrderDetailedInfo>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.rpc.OrderDetailedInfo, 4));
};


/** @param {Array.<!proto.rpc.OrderDetailedInfo>} value  */
proto.rpc.OrderPendingResponse.prototype.setOrdersList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 4, value);
};


proto.rpc.OrderPendingResponse.prototype.clearOrdersList = function() {
  this.setOrdersList([]);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.rpc.OrderPendingDetailRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.rpc.OrderPendingDetailRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.rpc.OrderPendingDetailRequest.displayName = 'proto.rpc.OrderPendingDetailRequest';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.rpc.OrderPendingDetailRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.rpc.OrderPendingDetailRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.rpc.OrderPendingDetailRequest} msg The msg instance to transform.
 * @return {!Object}
 */
proto.rpc.OrderPendingDetailRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    market: msg.getMarket(),
    orderId: msg.getOrderId()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.rpc.OrderPendingDetailRequest}
 */
proto.rpc.OrderPendingDetailRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.rpc.OrderPendingDetailRequest;
  return proto.rpc.OrderPendingDetailRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.rpc.OrderPendingDetailRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.rpc.OrderPendingDetailRequest}
 */
proto.rpc.OrderPendingDetailRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setMarket(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setOrderId(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.rpc.OrderPendingDetailRequest} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.rpc.OrderPendingDetailRequest.serializeBinaryToWriter = function(message, writer) {
  message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.rpc.OrderPendingDetailRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.rpc.OrderPendingDetailRequest.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
  f = this.getMarket();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = this.getOrderId();
  if (f !== 0) {
    writer.writeUint32(
      2,
      f
    );
  }
};


/**
 * Creates a deep clone of this proto. No data is shared with the original.
 * @return {!proto.rpc.OrderPendingDetailRequest} The clone.
 */
proto.rpc.OrderPendingDetailRequest.prototype.cloneMessage = function() {
  return /** @type {!proto.rpc.OrderPendingDetailRequest} */ (jspb.Message.cloneMessage(this));
};


/**
 * optional string market = 1;
 * @return {string}
 */
proto.rpc.OrderPendingDetailRequest.prototype.getMarket = function() {
  return /** @type {string} */ (jspb.Message.getFieldProto3(this, 1, ""));
};


/** @param {string} value  */
proto.rpc.OrderPendingDetailRequest.prototype.setMarket = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * optional uint32 order_id = 2;
 * @return {number}
 */
proto.rpc.OrderPendingDetailRequest.prototype.getOrderId = function() {
  return /** @type {number} */ (jspb.Message.getFieldProto3(this, 2, 0));
};


/** @param {number} value  */
proto.rpc.OrderPendingDetailRequest.prototype.setOrderId = function(value) {
  jspb.Message.setField(this, 2, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.rpc.OrderFinishedRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.rpc.OrderFinishedRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.rpc.OrderFinishedRequest.displayName = 'proto.rpc.OrderFinishedRequest';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.rpc.OrderFinishedRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.rpc.OrderFinishedRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.rpc.OrderFinishedRequest} msg The msg instance to transform.
 * @return {!Object}
 */
proto.rpc.OrderFinishedRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    userId: msg.getUserId(),
    market: msg.getMarket(),
    startTime: msg.getStartTime(),
    endTime: msg.getEndTime(),
    offset: msg.getOffset(),
    limit: msg.getLimit(),
    side: msg.getSide()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.rpc.OrderFinishedRequest}
 */
proto.rpc.OrderFinishedRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.rpc.OrderFinishedRequest;
  return proto.rpc.OrderFinishedRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.rpc.OrderFinishedRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.rpc.OrderFinishedRequest}
 */
proto.rpc.OrderFinishedRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setUserId(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setMarket(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setStartTime(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setEndTime(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setOffset(value);
      break;
    case 6:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setLimit(value);
      break;
    case 7:
      var value = /** @type {!proto.rpc.MarketSide} */ (reader.readEnum());
      msg.setSide(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.rpc.OrderFinishedRequest} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.rpc.OrderFinishedRequest.serializeBinaryToWriter = function(message, writer) {
  message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.rpc.OrderFinishedRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.rpc.OrderFinishedRequest.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
  f = this.getUserId();
  if (f !== 0) {
    writer.writeUint32(
      1,
      f
    );
  }
  f = this.getMarket();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = this.getStartTime();
  if (f !== 0) {
    writer.writeUint64(
      3,
      f
    );
  }
  f = this.getEndTime();
  if (f !== 0) {
    writer.writeUint64(
      4,
      f
    );
  }
  f = this.getOffset();
  if (f !== 0) {
    writer.writeUint32(
      5,
      f
    );
  }
  f = this.getLimit();
  if (f !== 0) {
    writer.writeUint32(
      6,
      f
    );
  }
  f = this.getSide();
  if (f !== 0.0) {
    writer.writeEnum(
      7,
      f
    );
  }
};


/**
 * Creates a deep clone of this proto. No data is shared with the original.
 * @return {!proto.rpc.OrderFinishedRequest} The clone.
 */
proto.rpc.OrderFinishedRequest.prototype.cloneMessage = function() {
  return /** @type {!proto.rpc.OrderFinishedRequest} */ (jspb.Message.cloneMessage(this));
};


/**
 * optional uint32 user_id = 1;
 * @return {number}
 */
proto.rpc.OrderFinishedRequest.prototype.getUserId = function() {
  return /** @type {number} */ (jspb.Message.getFieldProto3(this, 1, 0));
};


/** @param {number} value  */
proto.rpc.OrderFinishedRequest.prototype.setUserId = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * optional string market = 2;
 * @return {string}
 */
proto.rpc.OrderFinishedRequest.prototype.getMarket = function() {
  return /** @type {string} */ (jspb.Message.getFieldProto3(this, 2, ""));
};


/** @param {string} value  */
proto.rpc.OrderFinishedRequest.prototype.setMarket = function(value) {
  jspb.Message.setField(this, 2, value);
};


/**
 * optional uint64 start_time = 3;
 * @return {number}
 */
proto.rpc.OrderFinishedRequest.prototype.getStartTime = function() {
  return /** @type {number} */ (jspb.Message.getFieldProto3(this, 3, 0));
};


/** @param {number} value  */
proto.rpc.OrderFinishedRequest.prototype.setStartTime = function(value) {
  jspb.Message.setField(this, 3, value);
};


/**
 * optional uint64 end_time = 4;
 * @return {number}
 */
proto.rpc.OrderFinishedRequest.prototype.getEndTime = function() {
  return /** @type {number} */ (jspb.Message.getFieldProto3(this, 4, 0));
};


/** @param {number} value  */
proto.rpc.OrderFinishedRequest.prototype.setEndTime = function(value) {
  jspb.Message.setField(this, 4, value);
};


/**
 * optional uint32 offset = 5;
 * @return {number}
 */
proto.rpc.OrderFinishedRequest.prototype.getOffset = function() {
  return /** @type {number} */ (jspb.Message.getFieldProto3(this, 5, 0));
};


/** @param {number} value  */
proto.rpc.OrderFinishedRequest.prototype.setOffset = function(value) {
  jspb.Message.setField(this, 5, value);
};


/**
 * optional uint32 limit = 6;
 * @return {number}
 */
proto.rpc.OrderFinishedRequest.prototype.getLimit = function() {
  return /** @type {number} */ (jspb.Message.getFieldProto3(this, 6, 0));
};


/** @param {number} value  */
proto.rpc.OrderFinishedRequest.prototype.setLimit = function(value) {
  jspb.Message.setField(this, 6, value);
};


/**
 * optional MarketSide side = 7;
 * @return {!proto.rpc.MarketSide}
 */
proto.rpc.OrderFinishedRequest.prototype.getSide = function() {
  return /** @type {!proto.rpc.MarketSide} */ (jspb.Message.getFieldProto3(this, 7, 0));
};


/** @param {!proto.rpc.MarketSide} value  */
proto.rpc.OrderFinishedRequest.prototype.setSide = function(value) {
  jspb.Message.setField(this, 7, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.rpc.OrderFinishedResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.rpc.OrderFinishedResponse.repeatedFields_, null);
};
goog.inherits(proto.rpc.OrderFinishedResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.rpc.OrderFinishedResponse.displayName = 'proto.rpc.OrderFinishedResponse';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.rpc.OrderFinishedResponse.repeatedFields_ = [4];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.rpc.OrderFinishedResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.rpc.OrderFinishedResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.rpc.OrderFinishedResponse} msg The msg instance to transform.
 * @return {!Object}
 */
proto.rpc.OrderFinishedResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    offset: msg.getOffset(),
    limit: msg.getLimit(),
    total: msg.getTotal(),
    ordersList: jspb.Message.toObjectList(msg.getOrdersList(),
    proto.rpc.OrderDetailedInfo.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.rpc.OrderFinishedResponse}
 */
proto.rpc.OrderFinishedResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.rpc.OrderFinishedResponse;
  return proto.rpc.OrderFinishedResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.rpc.OrderFinishedResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.rpc.OrderFinishedResponse}
 */
proto.rpc.OrderFinishedResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setOffset(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setLimit(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setTotal(value);
      break;
    case 4:
      var value = new proto.rpc.OrderDetailedInfo;
      reader.readMessage(value,proto.rpc.OrderDetailedInfo.deserializeBinaryFromReader);
      msg.getOrdersList().push(value);
      msg.setOrdersList(msg.getOrdersList());
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.rpc.OrderFinishedResponse} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.rpc.OrderFinishedResponse.serializeBinaryToWriter = function(message, writer) {
  message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.rpc.OrderFinishedResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.rpc.OrderFinishedResponse.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
  f = this.getOffset();
  if (f !== 0) {
    writer.writeUint32(
      1,
      f
    );
  }
  f = this.getLimit();
  if (f !== 0) {
    writer.writeUint32(
      2,
      f
    );
  }
  f = this.getTotal();
  if (f !== 0) {
    writer.writeUint64(
      3,
      f
    );
  }
  f = this.getOrdersList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      4,
      f,
      proto.rpc.OrderDetailedInfo.serializeBinaryToWriter
    );
  }
};


/**
 * Creates a deep clone of this proto. No data is shared with the original.
 * @return {!proto.rpc.OrderFinishedResponse} The clone.
 */
proto.rpc.OrderFinishedResponse.prototype.cloneMessage = function() {
  return /** @type {!proto.rpc.OrderFinishedResponse} */ (jspb.Message.cloneMessage(this));
};


/**
 * optional uint32 offset = 1;
 * @return {number}
 */
proto.rpc.OrderFinishedResponse.prototype.getOffset = function() {
  return /** @type {number} */ (jspb.Message.getFieldProto3(this, 1, 0));
};


/** @param {number} value  */
proto.rpc.OrderFinishedResponse.prototype.setOffset = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * optional uint32 limit = 2;
 * @return {number}
 */
proto.rpc.OrderFinishedResponse.prototype.getLimit = function() {
  return /** @type {number} */ (jspb.Message.getFieldProto3(this, 2, 0));
};


/** @param {number} value  */
proto.rpc.OrderFinishedResponse.prototype.setLimit = function(value) {
  jspb.Message.setField(this, 2, value);
};


/**
 * optional uint64 total = 3;
 * @return {number}
 */
proto.rpc.OrderFinishedResponse.prototype.getTotal = function() {
  return /** @type {number} */ (jspb.Message.getFieldProto3(this, 3, 0));
};


/** @param {number} value  */
proto.rpc.OrderFinishedResponse.prototype.setTotal = function(value) {
  jspb.Message.setField(this, 3, value);
};


/**
 * repeated OrderDetailedInfo orders = 4;
 * If you change this array by adding, removing or replacing elements, or if you
 * replace the array itself, then you must call the setter to update it.
 * @return {!Array.<!proto.rpc.OrderDetailedInfo>}
 */
proto.rpc.OrderFinishedResponse.prototype.getOrdersList = function() {
  return /** @type{!Array.<!proto.rpc.OrderDetailedInfo>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.rpc.OrderDetailedInfo, 4));
};


/** @param {Array.<!proto.rpc.OrderDetailedInfo>} value  */
proto.rpc.OrderFinishedResponse.prototype.setOrdersList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 4, value);
};


proto.rpc.OrderFinishedResponse.prototype.clearOrdersList = function() {
  this.setOrdersList([]);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.rpc.OrderFinishedDetailRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.rpc.OrderFinishedDetailRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.rpc.OrderFinishedDetailRequest.displayName = 'proto.rpc.OrderFinishedDetailRequest';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.rpc.OrderFinishedDetailRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.rpc.OrderFinishedDetailRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.rpc.OrderFinishedDetailRequest} msg The msg instance to transform.
 * @return {!Object}
 */
proto.rpc.OrderFinishedDetailRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    orderId: msg.getOrderId()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.rpc.OrderFinishedDetailRequest}
 */
proto.rpc.OrderFinishedDetailRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.rpc.OrderFinishedDetailRequest;
  return proto.rpc.OrderFinishedDetailRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.rpc.OrderFinishedDetailRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.rpc.OrderFinishedDetailRequest}
 */
proto.rpc.OrderFinishedDetailRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setOrderId(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.rpc.OrderFinishedDetailRequest} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.rpc.OrderFinishedDetailRequest.serializeBinaryToWriter = function(message, writer) {
  message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.rpc.OrderFinishedDetailRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.rpc.OrderFinishedDetailRequest.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
  f = this.getOrderId();
  if (f !== 0) {
    writer.writeUint32(
      1,
      f
    );
  }
};


/**
 * Creates a deep clone of this proto. No data is shared with the original.
 * @return {!proto.rpc.OrderFinishedDetailRequest} The clone.
 */
proto.rpc.OrderFinishedDetailRequest.prototype.cloneMessage = function() {
  return /** @type {!proto.rpc.OrderFinishedDetailRequest} */ (jspb.Message.cloneMessage(this));
};


/**
 * optional uint32 order_id = 1;
 * @return {number}
 */
proto.rpc.OrderFinishedDetailRequest.prototype.getOrderId = function() {
  return /** @type {number} */ (jspb.Message.getFieldProto3(this, 1, 0));
};


/** @param {number} value  */
proto.rpc.OrderFinishedDetailRequest.prototype.setOrderId = function(value) {
  jspb.Message.setField(this, 1, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.rpc.MarketLastRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.rpc.MarketLastRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.rpc.MarketLastRequest.displayName = 'proto.rpc.MarketLastRequest';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.rpc.MarketLastRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.rpc.MarketLastRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.rpc.MarketLastRequest} msg The msg instance to transform.
 * @return {!Object}
 */
proto.rpc.MarketLastRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    market: msg.getMarket()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.rpc.MarketLastRequest}
 */
proto.rpc.MarketLastRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.rpc.MarketLastRequest;
  return proto.rpc.MarketLastRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.rpc.MarketLastRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.rpc.MarketLastRequest}
 */
proto.rpc.MarketLastRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setMarket(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.rpc.MarketLastRequest} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.rpc.MarketLastRequest.serializeBinaryToWriter = function(message, writer) {
  message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.rpc.MarketLastRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.rpc.MarketLastRequest.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
  f = this.getMarket();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * Creates a deep clone of this proto. No data is shared with the original.
 * @return {!proto.rpc.MarketLastRequest} The clone.
 */
proto.rpc.MarketLastRequest.prototype.cloneMessage = function() {
  return /** @type {!proto.rpc.MarketLastRequest} */ (jspb.Message.cloneMessage(this));
};


/**
 * optional string market = 1;
 * @return {string}
 */
proto.rpc.MarketLastRequest.prototype.getMarket = function() {
  return /** @type {string} */ (jspb.Message.getFieldProto3(this, 1, ""));
};


/** @param {string} value  */
proto.rpc.MarketLastRequest.prototype.setMarket = function(value) {
  jspb.Message.setField(this, 1, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.rpc.MarketLastResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.rpc.MarketLastResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.rpc.MarketLastResponse.displayName = 'proto.rpc.MarketLastResponse';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.rpc.MarketLastResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.rpc.MarketLastResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.rpc.MarketLastResponse} msg The msg instance to transform.
 * @return {!Object}
 */
proto.rpc.MarketLastResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    price: msg.getPrice()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.rpc.MarketLastResponse}
 */
proto.rpc.MarketLastResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.rpc.MarketLastResponse;
  return proto.rpc.MarketLastResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.rpc.MarketLastResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.rpc.MarketLastResponse}
 */
proto.rpc.MarketLastResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setPrice(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.rpc.MarketLastResponse} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.rpc.MarketLastResponse.serializeBinaryToWriter = function(message, writer) {
  message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.rpc.MarketLastResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.rpc.MarketLastResponse.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
  f = this.getPrice();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * Creates a deep clone of this proto. No data is shared with the original.
 * @return {!proto.rpc.MarketLastResponse} The clone.
 */
proto.rpc.MarketLastResponse.prototype.cloneMessage = function() {
  return /** @type {!proto.rpc.MarketLastResponse} */ (jspb.Message.cloneMessage(this));
};


/**
 * optional string price = 1;
 * @return {string}
 */
proto.rpc.MarketLastResponse.prototype.getPrice = function() {
  return /** @type {string} */ (jspb.Message.getFieldProto3(this, 1, ""));
};


/** @param {string} value  */
proto.rpc.MarketLastResponse.prototype.setPrice = function(value) {
  jspb.Message.setField(this, 1, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.rpc.MarketDealsRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.rpc.MarketDealsRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.rpc.MarketDealsRequest.displayName = 'proto.rpc.MarketDealsRequest';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.rpc.MarketDealsRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.rpc.MarketDealsRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.rpc.MarketDealsRequest} msg The msg instance to transform.
 * @return {!Object}
 */
proto.rpc.MarketDealsRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    market: msg.getMarket(),
    limit: msg.getLimit(),
    lastId: msg.getLastId()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.rpc.MarketDealsRequest}
 */
proto.rpc.MarketDealsRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.rpc.MarketDealsRequest;
  return proto.rpc.MarketDealsRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.rpc.MarketDealsRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.rpc.MarketDealsRequest}
 */
proto.rpc.MarketDealsRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setMarket(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setLimit(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setLastId(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.rpc.MarketDealsRequest} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.rpc.MarketDealsRequest.serializeBinaryToWriter = function(message, writer) {
  message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.rpc.MarketDealsRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.rpc.MarketDealsRequest.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
  f = this.getMarket();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = this.getLimit();
  if (f !== 0) {
    writer.writeUint32(
      2,
      f
    );
  }
  f = this.getLastId();
  if (f !== 0) {
    writer.writeUint32(
      3,
      f
    );
  }
};


/**
 * Creates a deep clone of this proto. No data is shared with the original.
 * @return {!proto.rpc.MarketDealsRequest} The clone.
 */
proto.rpc.MarketDealsRequest.prototype.cloneMessage = function() {
  return /** @type {!proto.rpc.MarketDealsRequest} */ (jspb.Message.cloneMessage(this));
};


/**
 * optional string market = 1;
 * @return {string}
 */
proto.rpc.MarketDealsRequest.prototype.getMarket = function() {
  return /** @type {string} */ (jspb.Message.getFieldProto3(this, 1, ""));
};


/** @param {string} value  */
proto.rpc.MarketDealsRequest.prototype.setMarket = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * optional uint32 limit = 2;
 * @return {number}
 */
proto.rpc.MarketDealsRequest.prototype.getLimit = function() {
  return /** @type {number} */ (jspb.Message.getFieldProto3(this, 2, 0));
};


/** @param {number} value  */
proto.rpc.MarketDealsRequest.prototype.setLimit = function(value) {
  jspb.Message.setField(this, 2, value);
};


/**
 * optional uint32 last_id = 3;
 * @return {number}
 */
proto.rpc.MarketDealsRequest.prototype.getLastId = function() {
  return /** @type {number} */ (jspb.Message.getFieldProto3(this, 3, 0));
};


/** @param {number} value  */
proto.rpc.MarketDealsRequest.prototype.setLastId = function(value) {
  jspb.Message.setField(this, 3, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.rpc.MarketDealsResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.rpc.MarketDealsResponse.repeatedFields_, null);
};
goog.inherits(proto.rpc.MarketDealsResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.rpc.MarketDealsResponse.displayName = 'proto.rpc.MarketDealsResponse';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.rpc.MarketDealsResponse.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.rpc.MarketDealsResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.rpc.MarketDealsResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.rpc.MarketDealsResponse} msg The msg instance to transform.
 * @return {!Object}
 */
proto.rpc.MarketDealsResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    dealsList: jspb.Message.toObjectList(msg.getDealsList(),
    proto.rpc.MarketDealsResponse.Deal.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.rpc.MarketDealsResponse}
 */
proto.rpc.MarketDealsResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.rpc.MarketDealsResponse;
  return proto.rpc.MarketDealsResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.rpc.MarketDealsResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.rpc.MarketDealsResponse}
 */
proto.rpc.MarketDealsResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.rpc.MarketDealsResponse.Deal;
      reader.readMessage(value,proto.rpc.MarketDealsResponse.Deal.deserializeBinaryFromReader);
      msg.getDealsList().push(value);
      msg.setDealsList(msg.getDealsList());
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.rpc.MarketDealsResponse} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.rpc.MarketDealsResponse.serializeBinaryToWriter = function(message, writer) {
  message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.rpc.MarketDealsResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.rpc.MarketDealsResponse.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
  f = this.getDealsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.rpc.MarketDealsResponse.Deal.serializeBinaryToWriter
    );
  }
};


/**
 * Creates a deep clone of this proto. No data is shared with the original.
 * @return {!proto.rpc.MarketDealsResponse} The clone.
 */
proto.rpc.MarketDealsResponse.prototype.cloneMessage = function() {
  return /** @type {!proto.rpc.MarketDealsResponse} */ (jspb.Message.cloneMessage(this));
};


/**
 * repeated Deal deals = 1;
 * If you change this array by adding, removing or replacing elements, or if you
 * replace the array itself, then you must call the setter to update it.
 * @return {!Array.<!proto.rpc.MarketDealsResponse.Deal>}
 */
proto.rpc.MarketDealsResponse.prototype.getDealsList = function() {
  return /** @type{!Array.<!proto.rpc.MarketDealsResponse.Deal>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.rpc.MarketDealsResponse.Deal, 1));
};


/** @param {Array.<!proto.rpc.MarketDealsResponse.Deal>} value  */
proto.rpc.MarketDealsResponse.prototype.setDealsList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 1, value);
};


proto.rpc.MarketDealsResponse.prototype.clearDealsList = function() {
  this.setDealsList([]);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.rpc.MarketDealsResponse.Deal = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.rpc.MarketDealsResponse.Deal, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.rpc.MarketDealsResponse.Deal.displayName = 'proto.rpc.MarketDealsResponse.Deal';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.rpc.MarketDealsResponse.Deal.prototype.toObject = function(opt_includeInstance) {
  return proto.rpc.MarketDealsResponse.Deal.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.rpc.MarketDealsResponse.Deal} msg The msg instance to transform.
 * @return {!Object}
 */
proto.rpc.MarketDealsResponse.Deal.toObject = function(includeInstance, msg) {
  var f, obj = {
    dealId: msg.getDealId(),
    time: msg.getTime(),
    type: msg.getType(),
    amount: msg.getAmount(),
    price: msg.getPrice()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.rpc.MarketDealsResponse.Deal}
 */
proto.rpc.MarketDealsResponse.Deal.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.rpc.MarketDealsResponse.Deal;
  return proto.rpc.MarketDealsResponse.Deal.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.rpc.MarketDealsResponse.Deal} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.rpc.MarketDealsResponse.Deal}
 */
proto.rpc.MarketDealsResponse.Deal.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setDealId(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setTime(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setType(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setAmount(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.setPrice(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.rpc.MarketDealsResponse.Deal} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.rpc.MarketDealsResponse.Deal.serializeBinaryToWriter = function(message, writer) {
  message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.rpc.MarketDealsResponse.Deal.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.rpc.MarketDealsResponse.Deal.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
  f = this.getDealId();
  if (f !== 0) {
    writer.writeUint32(
      1,
      f
    );
  }
  f = this.getTime();
  if (f !== 0.0) {
    writer.writeDouble(
      2,
      f
    );
  }
  f = this.getType();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = this.getAmount();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
  f = this.getPrice();
  if (f.length > 0) {
    writer.writeString(
      5,
      f
    );
  }
};


/**
 * Creates a deep clone of this proto. No data is shared with the original.
 * @return {!proto.rpc.MarketDealsResponse.Deal} The clone.
 */
proto.rpc.MarketDealsResponse.Deal.prototype.cloneMessage = function() {
  return /** @type {!proto.rpc.MarketDealsResponse.Deal} */ (jspb.Message.cloneMessage(this));
};


/**
 * optional uint32 deal_id = 1;
 * @return {number}
 */
proto.rpc.MarketDealsResponse.Deal.prototype.getDealId = function() {
  return /** @type {number} */ (jspb.Message.getFieldProto3(this, 1, 0));
};


/** @param {number} value  */
proto.rpc.MarketDealsResponse.Deal.prototype.setDealId = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * optional double time = 2;
 * @return {number}
 */
proto.rpc.MarketDealsResponse.Deal.prototype.getTime = function() {
  return /** @type {number} */ (jspb.Message.getFieldProto3(this, 2, 0));
};


/** @param {number} value  */
proto.rpc.MarketDealsResponse.Deal.prototype.setTime = function(value) {
  jspb.Message.setField(this, 2, value);
};


/**
 * optional string type = 3;
 * @return {string}
 */
proto.rpc.MarketDealsResponse.Deal.prototype.getType = function() {
  return /** @type {string} */ (jspb.Message.getFieldProto3(this, 3, ""));
};


/** @param {string} value  */
proto.rpc.MarketDealsResponse.Deal.prototype.setType = function(value) {
  jspb.Message.setField(this, 3, value);
};


/**
 * optional string amount = 4;
 * @return {string}
 */
proto.rpc.MarketDealsResponse.Deal.prototype.getAmount = function() {
  return /** @type {string} */ (jspb.Message.getFieldProto3(this, 4, ""));
};


/** @param {string} value  */
proto.rpc.MarketDealsResponse.Deal.prototype.setAmount = function(value) {
  jspb.Message.setField(this, 4, value);
};


/**
 * optional string price = 5;
 * @return {string}
 */
proto.rpc.MarketDealsResponse.Deal.prototype.getPrice = function() {
  return /** @type {string} */ (jspb.Message.getFieldProto3(this, 5, ""));
};


/** @param {string} value  */
proto.rpc.MarketDealsResponse.Deal.prototype.setPrice = function(value) {
  jspb.Message.setField(this, 5, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.rpc.MarketUserDealsRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.rpc.MarketUserDealsRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.rpc.MarketUserDealsRequest.displayName = 'proto.rpc.MarketUserDealsRequest';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.rpc.MarketUserDealsRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.rpc.MarketUserDealsRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.rpc.MarketUserDealsRequest} msg The msg instance to transform.
 * @return {!Object}
 */
proto.rpc.MarketUserDealsRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    userId: msg.getUserId(),
    market: msg.getMarket(),
    offset: msg.getOffset(),
    limit: msg.getLimit()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.rpc.MarketUserDealsRequest}
 */
proto.rpc.MarketUserDealsRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.rpc.MarketUserDealsRequest;
  return proto.rpc.MarketUserDealsRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.rpc.MarketUserDealsRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.rpc.MarketUserDealsRequest}
 */
proto.rpc.MarketUserDealsRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setUserId(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setMarket(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setOffset(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setLimit(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.rpc.MarketUserDealsRequest} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.rpc.MarketUserDealsRequest.serializeBinaryToWriter = function(message, writer) {
  message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.rpc.MarketUserDealsRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.rpc.MarketUserDealsRequest.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
  f = this.getUserId();
  if (f !== 0) {
    writer.writeUint32(
      1,
      f
    );
  }
  f = this.getMarket();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = this.getOffset();
  if (f !== 0) {
    writer.writeUint32(
      3,
      f
    );
  }
  f = this.getLimit();
  if (f !== 0) {
    writer.writeUint32(
      4,
      f
    );
  }
};


/**
 * Creates a deep clone of this proto. No data is shared with the original.
 * @return {!proto.rpc.MarketUserDealsRequest} The clone.
 */
proto.rpc.MarketUserDealsRequest.prototype.cloneMessage = function() {
  return /** @type {!proto.rpc.MarketUserDealsRequest} */ (jspb.Message.cloneMessage(this));
};


/**
 * optional uint32 user_id = 1;
 * @return {number}
 */
proto.rpc.MarketUserDealsRequest.prototype.getUserId = function() {
  return /** @type {number} */ (jspb.Message.getFieldProto3(this, 1, 0));
};


/** @param {number} value  */
proto.rpc.MarketUserDealsRequest.prototype.setUserId = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * optional string market = 2;
 * @return {string}
 */
proto.rpc.MarketUserDealsRequest.prototype.getMarket = function() {
  return /** @type {string} */ (jspb.Message.getFieldProto3(this, 2, ""));
};


/** @param {string} value  */
proto.rpc.MarketUserDealsRequest.prototype.setMarket = function(value) {
  jspb.Message.setField(this, 2, value);
};


/**
 * optional uint32 offset = 3;
 * @return {number}
 */
proto.rpc.MarketUserDealsRequest.prototype.getOffset = function() {
  return /** @type {number} */ (jspb.Message.getFieldProto3(this, 3, 0));
};


/** @param {number} value  */
proto.rpc.MarketUserDealsRequest.prototype.setOffset = function(value) {
  jspb.Message.setField(this, 3, value);
};


/**
 * optional uint32 limit = 4;
 * @return {number}
 */
proto.rpc.MarketUserDealsRequest.prototype.getLimit = function() {
  return /** @type {number} */ (jspb.Message.getFieldProto3(this, 4, 0));
};


/** @param {number} value  */
proto.rpc.MarketUserDealsRequest.prototype.setLimit = function(value) {
  jspb.Message.setField(this, 4, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.rpc.MarketUserDealsResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.rpc.MarketUserDealsResponse.repeatedFields_, null);
};
goog.inherits(proto.rpc.MarketUserDealsResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.rpc.MarketUserDealsResponse.displayName = 'proto.rpc.MarketUserDealsResponse';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.rpc.MarketUserDealsResponse.repeatedFields_ = [3];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.rpc.MarketUserDealsResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.rpc.MarketUserDealsResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.rpc.MarketUserDealsResponse} msg The msg instance to transform.
 * @return {!Object}
 */
proto.rpc.MarketUserDealsResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    offset: msg.getOffset(),
    limit: msg.getLimit(),
    dealsList: jspb.Message.toObjectList(msg.getDealsList(),
    proto.rpc.DealDetail.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.rpc.MarketUserDealsResponse}
 */
proto.rpc.MarketUserDealsResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.rpc.MarketUserDealsResponse;
  return proto.rpc.MarketUserDealsResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.rpc.MarketUserDealsResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.rpc.MarketUserDealsResponse}
 */
proto.rpc.MarketUserDealsResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setOffset(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setLimit(value);
      break;
    case 3:
      var value = new proto.rpc.DealDetail;
      reader.readMessage(value,proto.rpc.DealDetail.deserializeBinaryFromReader);
      msg.getDealsList().push(value);
      msg.setDealsList(msg.getDealsList());
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.rpc.MarketUserDealsResponse} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.rpc.MarketUserDealsResponse.serializeBinaryToWriter = function(message, writer) {
  message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.rpc.MarketUserDealsResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.rpc.MarketUserDealsResponse.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
  f = this.getOffset();
  if (f !== 0) {
    writer.writeUint32(
      1,
      f
    );
  }
  f = this.getLimit();
  if (f !== 0) {
    writer.writeUint32(
      2,
      f
    );
  }
  f = this.getDealsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      3,
      f,
      proto.rpc.DealDetail.serializeBinaryToWriter
    );
  }
};


/**
 * Creates a deep clone of this proto. No data is shared with the original.
 * @return {!proto.rpc.MarketUserDealsResponse} The clone.
 */
proto.rpc.MarketUserDealsResponse.prototype.cloneMessage = function() {
  return /** @type {!proto.rpc.MarketUserDealsResponse} */ (jspb.Message.cloneMessage(this));
};


/**
 * optional uint32 offset = 1;
 * @return {number}
 */
proto.rpc.MarketUserDealsResponse.prototype.getOffset = function() {
  return /** @type {number} */ (jspb.Message.getFieldProto3(this, 1, 0));
};


/** @param {number} value  */
proto.rpc.MarketUserDealsResponse.prototype.setOffset = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * optional uint32 limit = 2;
 * @return {number}
 */
proto.rpc.MarketUserDealsResponse.prototype.getLimit = function() {
  return /** @type {number} */ (jspb.Message.getFieldProto3(this, 2, 0));
};


/** @param {number} value  */
proto.rpc.MarketUserDealsResponse.prototype.setLimit = function(value) {
  jspb.Message.setField(this, 2, value);
};


/**
 * repeated DealDetail deals = 3;
 * If you change this array by adding, removing or replacing elements, or if you
 * replace the array itself, then you must call the setter to update it.
 * @return {!Array.<!proto.rpc.DealDetail>}
 */
proto.rpc.MarketUserDealsResponse.prototype.getDealsList = function() {
  return /** @type{!Array.<!proto.rpc.DealDetail>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.rpc.DealDetail, 3));
};


/** @param {Array.<!proto.rpc.DealDetail>} value  */
proto.rpc.MarketUserDealsResponse.prototype.setDealsList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 3, value);
};


proto.rpc.MarketUserDealsResponse.prototype.clearDealsList = function() {
  this.setDealsList([]);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.rpc.MarketKLineRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.rpc.MarketKLineRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.rpc.MarketKLineRequest.displayName = 'proto.rpc.MarketKLineRequest';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.rpc.MarketKLineRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.rpc.MarketKLineRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.rpc.MarketKLineRequest} msg The msg instance to transform.
 * @return {!Object}
 */
proto.rpc.MarketKLineRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    market: msg.getMarket(),
    start: msg.getStart(),
    end: msg.getEnd(),
    interval: msg.getInterval()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.rpc.MarketKLineRequest}
 */
proto.rpc.MarketKLineRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.rpc.MarketKLineRequest;
  return proto.rpc.MarketKLineRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.rpc.MarketKLineRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.rpc.MarketKLineRequest}
 */
proto.rpc.MarketKLineRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setMarket(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setStart(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setEnd(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setInterval(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.rpc.MarketKLineRequest} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.rpc.MarketKLineRequest.serializeBinaryToWriter = function(message, writer) {
  message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.rpc.MarketKLineRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.rpc.MarketKLineRequest.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
  f = this.getMarket();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = this.getStart();
  if (f !== 0) {
    writer.writeUint64(
      2,
      f
    );
  }
  f = this.getEnd();
  if (f !== 0) {
    writer.writeUint64(
      3,
      f
    );
  }
  f = this.getInterval();
  if (f !== 0) {
    writer.writeUint32(
      4,
      f
    );
  }
};


/**
 * Creates a deep clone of this proto. No data is shared with the original.
 * @return {!proto.rpc.MarketKLineRequest} The clone.
 */
proto.rpc.MarketKLineRequest.prototype.cloneMessage = function() {
  return /** @type {!proto.rpc.MarketKLineRequest} */ (jspb.Message.cloneMessage(this));
};


/**
 * optional string market = 1;
 * @return {string}
 */
proto.rpc.MarketKLineRequest.prototype.getMarket = function() {
  return /** @type {string} */ (jspb.Message.getFieldProto3(this, 1, ""));
};


/** @param {string} value  */
proto.rpc.MarketKLineRequest.prototype.setMarket = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * optional uint64 start = 2;
 * @return {number}
 */
proto.rpc.MarketKLineRequest.prototype.getStart = function() {
  return /** @type {number} */ (jspb.Message.getFieldProto3(this, 2, 0));
};


/** @param {number} value  */
proto.rpc.MarketKLineRequest.prototype.setStart = function(value) {
  jspb.Message.setField(this, 2, value);
};


/**
 * optional uint64 end = 3;
 * @return {number}
 */
proto.rpc.MarketKLineRequest.prototype.getEnd = function() {
  return /** @type {number} */ (jspb.Message.getFieldProto3(this, 3, 0));
};


/** @param {number} value  */
proto.rpc.MarketKLineRequest.prototype.setEnd = function(value) {
  jspb.Message.setField(this, 3, value);
};


/**
 * optional uint32 interval = 4;
 * @return {number}
 */
proto.rpc.MarketKLineRequest.prototype.getInterval = function() {
  return /** @type {number} */ (jspb.Message.getFieldProto3(this, 4, 0));
};


/** @param {number} value  */
proto.rpc.MarketKLineRequest.prototype.setInterval = function(value) {
  jspb.Message.setField(this, 4, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.rpc.MarketKLineResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.rpc.MarketKLineResponse.repeatedFields_, null);
};
goog.inherits(proto.rpc.MarketKLineResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.rpc.MarketKLineResponse.displayName = 'proto.rpc.MarketKLineResponse';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.rpc.MarketKLineResponse.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.rpc.MarketKLineResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.rpc.MarketKLineResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.rpc.MarketKLineResponse} msg The msg instance to transform.
 * @return {!Object}
 */
proto.rpc.MarketKLineResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    klineList: jspb.Message.toObjectList(msg.getKlineList(),
    proto.rpc.KLine.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.rpc.MarketKLineResponse}
 */
proto.rpc.MarketKLineResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.rpc.MarketKLineResponse;
  return proto.rpc.MarketKLineResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.rpc.MarketKLineResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.rpc.MarketKLineResponse}
 */
proto.rpc.MarketKLineResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.rpc.KLine;
      reader.readMessage(value,proto.rpc.KLine.deserializeBinaryFromReader);
      msg.getKlineList().push(value);
      msg.setKlineList(msg.getKlineList());
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.rpc.MarketKLineResponse} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.rpc.MarketKLineResponse.serializeBinaryToWriter = function(message, writer) {
  message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.rpc.MarketKLineResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.rpc.MarketKLineResponse.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
  f = this.getKlineList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.rpc.KLine.serializeBinaryToWriter
    );
  }
};


/**
 * Creates a deep clone of this proto. No data is shared with the original.
 * @return {!proto.rpc.MarketKLineResponse} The clone.
 */
proto.rpc.MarketKLineResponse.prototype.cloneMessage = function() {
  return /** @type {!proto.rpc.MarketKLineResponse} */ (jspb.Message.cloneMessage(this));
};


/**
 * repeated KLine kline = 1;
 * If you change this array by adding, removing or replacing elements, or if you
 * replace the array itself, then you must call the setter to update it.
 * @return {!Array.<!proto.rpc.KLine>}
 */
proto.rpc.MarketKLineResponse.prototype.getKlineList = function() {
  return /** @type{!Array.<!proto.rpc.KLine>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.rpc.KLine, 1));
};


/** @param {Array.<!proto.rpc.KLine>} value  */
proto.rpc.MarketKLineResponse.prototype.setKlineList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 1, value);
};


proto.rpc.MarketKLineResponse.prototype.clearKlineList = function() {
  this.setKlineList([]);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.rpc.MarketStatusRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.rpc.MarketStatusRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.rpc.MarketStatusRequest.displayName = 'proto.rpc.MarketStatusRequest';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.rpc.MarketStatusRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.rpc.MarketStatusRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.rpc.MarketStatusRequest} msg The msg instance to transform.
 * @return {!Object}
 */
proto.rpc.MarketStatusRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    market: msg.getMarket(),
    period: msg.getPeriod()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.rpc.MarketStatusRequest}
 */
proto.rpc.MarketStatusRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.rpc.MarketStatusRequest;
  return proto.rpc.MarketStatusRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.rpc.MarketStatusRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.rpc.MarketStatusRequest}
 */
proto.rpc.MarketStatusRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setMarket(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setPeriod(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.rpc.MarketStatusRequest} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.rpc.MarketStatusRequest.serializeBinaryToWriter = function(message, writer) {
  message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.rpc.MarketStatusRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.rpc.MarketStatusRequest.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
  f = this.getMarket();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = this.getPeriod();
  if (f !== 0) {
    writer.writeUint32(
      2,
      f
    );
  }
};


/**
 * Creates a deep clone of this proto. No data is shared with the original.
 * @return {!proto.rpc.MarketStatusRequest} The clone.
 */
proto.rpc.MarketStatusRequest.prototype.cloneMessage = function() {
  return /** @type {!proto.rpc.MarketStatusRequest} */ (jspb.Message.cloneMessage(this));
};


/**
 * optional string market = 1;
 * @return {string}
 */
proto.rpc.MarketStatusRequest.prototype.getMarket = function() {
  return /** @type {string} */ (jspb.Message.getFieldProto3(this, 1, ""));
};


/** @param {string} value  */
proto.rpc.MarketStatusRequest.prototype.setMarket = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * optional uint32 period = 2;
 * @return {number}
 */
proto.rpc.MarketStatusRequest.prototype.getPeriod = function() {
  return /** @type {number} */ (jspb.Message.getFieldProto3(this, 2, 0));
};


/** @param {number} value  */
proto.rpc.MarketStatusRequest.prototype.setPeriod = function(value) {
  jspb.Message.setField(this, 2, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.rpc.MarketStatusResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.rpc.MarketStatusResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.rpc.MarketStatusResponse.displayName = 'proto.rpc.MarketStatusResponse';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.rpc.MarketStatusResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.rpc.MarketStatusResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.rpc.MarketStatusResponse} msg The msg instance to transform.
 * @return {!Object}
 */
proto.rpc.MarketStatusResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    period: msg.getPeriod(),
    last: msg.getLast(),
    open: msg.getOpen(),
    close: msg.getClose(),
    high: msg.getHigh(),
    low: msg.getLow(),
    volume: msg.getVolume()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.rpc.MarketStatusResponse}
 */
proto.rpc.MarketStatusResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.rpc.MarketStatusResponse;
  return proto.rpc.MarketStatusResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.rpc.MarketStatusResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.rpc.MarketStatusResponse}
 */
proto.rpc.MarketStatusResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setPeriod(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setLast(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setOpen(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setClose(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.setHigh(value);
      break;
    case 6:
      var value = /** @type {string} */ (reader.readString());
      msg.setLow(value);
      break;
    case 7:
      var value = /** @type {string} */ (reader.readString());
      msg.setVolume(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.rpc.MarketStatusResponse} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.rpc.MarketStatusResponse.serializeBinaryToWriter = function(message, writer) {
  message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.rpc.MarketStatusResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.rpc.MarketStatusResponse.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
  f = this.getPeriod();
  if (f !== 0) {
    writer.writeUint32(
      1,
      f
    );
  }
  f = this.getLast();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = this.getOpen();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = this.getClose();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
  f = this.getHigh();
  if (f.length > 0) {
    writer.writeString(
      5,
      f
    );
  }
  f = this.getLow();
  if (f.length > 0) {
    writer.writeString(
      6,
      f
    );
  }
  f = this.getVolume();
  if (f.length > 0) {
    writer.writeString(
      7,
      f
    );
  }
};


/**
 * Creates a deep clone of this proto. No data is shared with the original.
 * @return {!proto.rpc.MarketStatusResponse} The clone.
 */
proto.rpc.MarketStatusResponse.prototype.cloneMessage = function() {
  return /** @type {!proto.rpc.MarketStatusResponse} */ (jspb.Message.cloneMessage(this));
};


/**
 * optional uint32 period = 1;
 * @return {number}
 */
proto.rpc.MarketStatusResponse.prototype.getPeriod = function() {
  return /** @type {number} */ (jspb.Message.getFieldProto3(this, 1, 0));
};


/** @param {number} value  */
proto.rpc.MarketStatusResponse.prototype.setPeriod = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * optional string last = 2;
 * @return {string}
 */
proto.rpc.MarketStatusResponse.prototype.getLast = function() {
  return /** @type {string} */ (jspb.Message.getFieldProto3(this, 2, ""));
};


/** @param {string} value  */
proto.rpc.MarketStatusResponse.prototype.setLast = function(value) {
  jspb.Message.setField(this, 2, value);
};


/**
 * optional string open = 3;
 * @return {string}
 */
proto.rpc.MarketStatusResponse.prototype.getOpen = function() {
  return /** @type {string} */ (jspb.Message.getFieldProto3(this, 3, ""));
};


/** @param {string} value  */
proto.rpc.MarketStatusResponse.prototype.setOpen = function(value) {
  jspb.Message.setField(this, 3, value);
};


/**
 * optional string close = 4;
 * @return {string}
 */
proto.rpc.MarketStatusResponse.prototype.getClose = function() {
  return /** @type {string} */ (jspb.Message.getFieldProto3(this, 4, ""));
};


/** @param {string} value  */
proto.rpc.MarketStatusResponse.prototype.setClose = function(value) {
  jspb.Message.setField(this, 4, value);
};


/**
 * optional string high = 5;
 * @return {string}
 */
proto.rpc.MarketStatusResponse.prototype.getHigh = function() {
  return /** @type {string} */ (jspb.Message.getFieldProto3(this, 5, ""));
};


/** @param {string} value  */
proto.rpc.MarketStatusResponse.prototype.setHigh = function(value) {
  jspb.Message.setField(this, 5, value);
};


/**
 * optional string low = 6;
 * @return {string}
 */
proto.rpc.MarketStatusResponse.prototype.getLow = function() {
  return /** @type {string} */ (jspb.Message.getFieldProto3(this, 6, ""));
};


/** @param {string} value  */
proto.rpc.MarketStatusResponse.prototype.setLow = function(value) {
  jspb.Message.setField(this, 6, value);
};


/**
 * optional string volume = 7;
 * @return {string}
 */
proto.rpc.MarketStatusResponse.prototype.getVolume = function() {
  return /** @type {string} */ (jspb.Message.getFieldProto3(this, 7, ""));
};


/** @param {string} value  */
proto.rpc.MarketStatusResponse.prototype.setVolume = function(value) {
  jspb.Message.setField(this, 7, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.rpc.SubscribeTodayStatus = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.rpc.SubscribeTodayStatus, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.rpc.SubscribeTodayStatus.displayName = 'proto.rpc.SubscribeTodayStatus';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.rpc.SubscribeTodayStatus.prototype.toObject = function(opt_includeInstance) {
  return proto.rpc.SubscribeTodayStatus.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.rpc.SubscribeTodayStatus} msg The msg instance to transform.
 * @return {!Object}
 */
proto.rpc.SubscribeTodayStatus.toObject = function(includeInstance, msg) {
  var f, obj = {
    market: msg.getMarket(),
    interval: msg.getInterval()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.rpc.SubscribeTodayStatus}
 */
proto.rpc.SubscribeTodayStatus.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.rpc.SubscribeTodayStatus;
  return proto.rpc.SubscribeTodayStatus.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.rpc.SubscribeTodayStatus} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.rpc.SubscribeTodayStatus}
 */
proto.rpc.SubscribeTodayStatus.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setMarket(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setInterval(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.rpc.SubscribeTodayStatus} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.rpc.SubscribeTodayStatus.serializeBinaryToWriter = function(message, writer) {
  message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.rpc.SubscribeTodayStatus.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.rpc.SubscribeTodayStatus.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
  f = this.getMarket();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = this.getInterval();
  if (f !== 0) {
    writer.writeUint32(
      2,
      f
    );
  }
};


/**
 * Creates a deep clone of this proto. No data is shared with the original.
 * @return {!proto.rpc.SubscribeTodayStatus} The clone.
 */
proto.rpc.SubscribeTodayStatus.prototype.cloneMessage = function() {
  return /** @type {!proto.rpc.SubscribeTodayStatus} */ (jspb.Message.cloneMessage(this));
};


/**
 * optional string market = 1;
 * @return {string}
 */
proto.rpc.SubscribeTodayStatus.prototype.getMarket = function() {
  return /** @type {string} */ (jspb.Message.getFieldProto3(this, 1, ""));
};


/** @param {string} value  */
proto.rpc.SubscribeTodayStatus.prototype.setMarket = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * optional uint32 interval = 2;
 * @return {number}
 */
proto.rpc.SubscribeTodayStatus.prototype.getInterval = function() {
  return /** @type {number} */ (jspb.Message.getFieldProto3(this, 2, 0));
};


/** @param {number} value  */
proto.rpc.SubscribeTodayStatus.prototype.setInterval = function(value) {
  jspb.Message.setField(this, 2, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.rpc.MarketStatusTodayRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.rpc.MarketStatusTodayRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.rpc.MarketStatusTodayRequest.displayName = 'proto.rpc.MarketStatusTodayRequest';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.rpc.MarketStatusTodayRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.rpc.MarketStatusTodayRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.rpc.MarketStatusTodayRequest} msg The msg instance to transform.
 * @return {!Object}
 */
proto.rpc.MarketStatusTodayRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    market: msg.getMarket()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.rpc.MarketStatusTodayRequest}
 */
proto.rpc.MarketStatusTodayRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.rpc.MarketStatusTodayRequest;
  return proto.rpc.MarketStatusTodayRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.rpc.MarketStatusTodayRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.rpc.MarketStatusTodayRequest}
 */
proto.rpc.MarketStatusTodayRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setMarket(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.rpc.MarketStatusTodayRequest} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.rpc.MarketStatusTodayRequest.serializeBinaryToWriter = function(message, writer) {
  message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.rpc.MarketStatusTodayRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.rpc.MarketStatusTodayRequest.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
  f = this.getMarket();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * Creates a deep clone of this proto. No data is shared with the original.
 * @return {!proto.rpc.MarketStatusTodayRequest} The clone.
 */
proto.rpc.MarketStatusTodayRequest.prototype.cloneMessage = function() {
  return /** @type {!proto.rpc.MarketStatusTodayRequest} */ (jspb.Message.cloneMessage(this));
};


/**
 * optional string market = 1;
 * @return {string}
 */
proto.rpc.MarketStatusTodayRequest.prototype.getMarket = function() {
  return /** @type {string} */ (jspb.Message.getFieldProto3(this, 1, ""));
};


/** @param {string} value  */
proto.rpc.MarketStatusTodayRequest.prototype.setMarket = function(value) {
  jspb.Message.setField(this, 1, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.rpc.MarketStatusTodayResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.rpc.MarketStatusTodayResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.rpc.MarketStatusTodayResponse.displayName = 'proto.rpc.MarketStatusTodayResponse';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.rpc.MarketStatusTodayResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.rpc.MarketStatusTodayResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.rpc.MarketStatusTodayResponse} msg The msg instance to transform.
 * @return {!Object}
 */
proto.rpc.MarketStatusTodayResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    open: msg.getOpen(),
    last: msg.getLast(),
    high: msg.getHigh(),
    low: msg.getLow(),
    deal: msg.getDeal(),
    volume: msg.getVolume()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.rpc.MarketStatusTodayResponse}
 */
proto.rpc.MarketStatusTodayResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.rpc.MarketStatusTodayResponse;
  return proto.rpc.MarketStatusTodayResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.rpc.MarketStatusTodayResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.rpc.MarketStatusTodayResponse}
 */
proto.rpc.MarketStatusTodayResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setOpen(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setLast(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setHigh(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setLow(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.setDeal(value);
      break;
    case 6:
      var value = /** @type {string} */ (reader.readString());
      msg.setVolume(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.rpc.MarketStatusTodayResponse} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.rpc.MarketStatusTodayResponse.serializeBinaryToWriter = function(message, writer) {
  message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.rpc.MarketStatusTodayResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.rpc.MarketStatusTodayResponse.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
  f = this.getOpen();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = this.getLast();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = this.getHigh();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = this.getLow();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
  f = this.getDeal();
  if (f.length > 0) {
    writer.writeString(
      5,
      f
    );
  }
  f = this.getVolume();
  if (f.length > 0) {
    writer.writeString(
      6,
      f
    );
  }
};


/**
 * Creates a deep clone of this proto. No data is shared with the original.
 * @return {!proto.rpc.MarketStatusTodayResponse} The clone.
 */
proto.rpc.MarketStatusTodayResponse.prototype.cloneMessage = function() {
  return /** @type {!proto.rpc.MarketStatusTodayResponse} */ (jspb.Message.cloneMessage(this));
};


/**
 * optional string open = 1;
 * @return {string}
 */
proto.rpc.MarketStatusTodayResponse.prototype.getOpen = function() {
  return /** @type {string} */ (jspb.Message.getFieldProto3(this, 1, ""));
};


/** @param {string} value  */
proto.rpc.MarketStatusTodayResponse.prototype.setOpen = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * optional string last = 2;
 * @return {string}
 */
proto.rpc.MarketStatusTodayResponse.prototype.getLast = function() {
  return /** @type {string} */ (jspb.Message.getFieldProto3(this, 2, ""));
};


/** @param {string} value  */
proto.rpc.MarketStatusTodayResponse.prototype.setLast = function(value) {
  jspb.Message.setField(this, 2, value);
};


/**
 * optional string high = 3;
 * @return {string}
 */
proto.rpc.MarketStatusTodayResponse.prototype.getHigh = function() {
  return /** @type {string} */ (jspb.Message.getFieldProto3(this, 3, ""));
};


/** @param {string} value  */
proto.rpc.MarketStatusTodayResponse.prototype.setHigh = function(value) {
  jspb.Message.setField(this, 3, value);
};


/**
 * optional string low = 4;
 * @return {string}
 */
proto.rpc.MarketStatusTodayResponse.prototype.getLow = function() {
  return /** @type {string} */ (jspb.Message.getFieldProto3(this, 4, ""));
};


/** @param {string} value  */
proto.rpc.MarketStatusTodayResponse.prototype.setLow = function(value) {
  jspb.Message.setField(this, 4, value);
};


/**
 * optional string deal = 5;
 * @return {string}
 */
proto.rpc.MarketStatusTodayResponse.prototype.getDeal = function() {
  return /** @type {string} */ (jspb.Message.getFieldProto3(this, 5, ""));
};


/** @param {string} value  */
proto.rpc.MarketStatusTodayResponse.prototype.setDeal = function(value) {
  jspb.Message.setField(this, 5, value);
};


/**
 * optional string volume = 6;
 * @return {string}
 */
proto.rpc.MarketStatusTodayResponse.prototype.getVolume = function() {
  return /** @type {string} */ (jspb.Message.getFieldProto3(this, 6, ""));
};


/** @param {string} value  */
proto.rpc.MarketStatusTodayResponse.prototype.setVolume = function(value) {
  jspb.Message.setField(this, 6, value);
};


/**
 * @enum {number}
 */
proto.rpc.Limit = {
  LIMITNONE: 0,
  MAXORDERS: 100,
  MAXDEPTH: 10000
};

/**
 * @enum {number}
 */
proto.rpc.OrderEvent = {
  NONEEVENT: 0,
  EVENTPUT: 1,
  EVENTUPDATE: 2,
  EVENTFINISH: 3
};

/**
 * @enum {number}
 */
proto.rpc.Asset = {
  BTC: 0,
  BCH: 1,
  ETH: 2,
  ETC: 3,
  LTC: 4,
  ZEC: 5,
  DASH: 6,
  XRP: 7,
  CNY: 8
};

/**
 * @enum {number}
 */
proto.rpc.Market = {
  BTCETH: 0,
  BTCBCH: 1,
  BTCLTC: 2,
  BTCXRP: 3,
  BTCXEM: 4,
  BTCZEC: 5,
  BTCDASH: 6,
  BTCCNY: 7,
  ETHBCH: 8,
  ETHETC: 9
};

/**
 * @enum {number}
 */
proto.rpc.MarketSide = {
  NONESIDE: 0,
  ASKSIDE: 1,
  BIDSIDE: 2
};

/**
 * @enum {number}
 */
proto.rpc.DealType = {
  NONEDEALTYPE: 0,
  SELL: 1,
  BUY: 2
};

goog.object.extend(exports, proto.rpc);
